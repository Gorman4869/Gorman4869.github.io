<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>axios</title>
      <link href="/2021/11/17/axios/"/>
      <url>/2021/11/17/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="axios是什么？"><a href="#axios是什么？" class="headerlink" title="axios是什么？"></a>axios是什么？</h3><ol><li>前端最流行的 ajax 请求库</li><li>react/vue 官方都推荐使用 axios 发 ajax 请求</li><li>文档: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li></ol><h3 id="axios特点"><a href="#axios特点" class="headerlink" title="axios特点"></a>axios特点</h3><ol><li>基于 xhr + promise 的异步 ajax 请求库</li><li>浏览器端/node 端都可以使用</li><li>支持请求／响应拦截器</li><li>支持请求取消</li><li>请求/响应数据转换</li><li>批量发送多个请求</li></ol><h3 id="axios常用语法"><a href="#axios常用语法" class="headerlink" title="axios常用语法"></a>axios常用语法</h3><p>axios(config): 通用/最本质的发任意类型请求的方式<br>axios(url[, config]): 可以只指定 url 发 get 请求<br>axios.request(config): 等同于 axios(config)<br>axios.get(url[, config]): 发 get 请求<br>axios.delete(url[, config]): 发 delete 请求<br>axios.post(url[, data, config]): 发 post 请求</p><p>axios.put(url[, data, config]): 发 put 请求<br>axios.defaults.xxx: 请求的默认全局配置<br>axios.interceptors.request.use(): 添加请求拦截器<br>axios.interceptors.response.use(): 添加响应拦截器<br>axios.create([config]): 创建一个新的 axios(它没有下面的功能)<br>axios.Cancel(): 用于创建取消请求的错误对象<br>axios.CancelToken(): 用于创建取消请求的 token 对象<br>axios.isCancel(): 是否是一个取消请求的错误<br>axios.all(promises): 用于批量执行多个异步请求<br>axios.spread(): 用来指定接收所有成功数据的回调函数的方法</p><h3 id="难点语法的理解和使用"><a href="#难点语法的理解和使用" class="headerlink" title="难点语法的理解和使用"></a>难点语法的理解和使用</h3><h4 id="aixos-create-config"><a href="#aixos-create-config" class="headerlink" title="aixos.create(config)"></a>aixos.create(config)</h4><ol><li>根据指定配置创建一个新的 axios, 也就每个新 axios 都有自己的配置</li><li>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</li><li>为什么要设计这个语法?<br>(1) 需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一<br>样, 如何处理<br>(2) 解决: 创建 2 个新 axios, 每个都有自己特有的配置, 分别应用到不同要<br>求的接口请求中</li></ol><h4 id="模拟axios发送请求"><a href="#模拟axios发送请求" class="headerlink" title="模拟axios发送请求"></a>模拟axios发送请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//构造函数</span><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token comment">//为了创建 default 默认属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>        request<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        response<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//原型添加相关的方法</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发送 AJAX 请求 请求的类型为 '</span><span class="token operator">+</span> config<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//声明函数</span><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//实例化一个对象</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// context.get()  context.post()  但是不能当做函数使用 context() X</span>    <span class="token comment">//创建请求函数</span>    <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// instance 是一个函数 并且可以 instance({})  此时 instance 不能 instance.get X</span>    <span class="token comment">//将 Axios.prototype 对象中的方法添加到instance函数对象中</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里让this始终指向context这个实例对象</span>        <span class="token comment">// this.default  this.interceptors</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为 instance 函数对象添加属性 default 与 interceptors</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> axios <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span><span class="token comment">// axios({method:'POST'});</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟axios发送请求-1"><a href="#模拟axios发送请求-1" class="headerlink" title="模拟axios发送请求"></a>模拟axios发送请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// axios 发送请求   axios  Axios.prototype.request  bind</span><span class="token comment">//1. 声明构造函数</span><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送请求</span>    <span class="token comment">//创建一个 promise 对象</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//声明一个数组</span>    <span class="token keyword">let</span> chains <span class="token operator">=</span> <span class="token punctuation">[</span>dispatchRequest<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// undefined 占位</span>    <span class="token comment">//调用 then 方法指定回调</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chains<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chains<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回 promise 的结果</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//2. dispatchRequest 函数</span><span class="token keyword">function</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//调用适配器发送请求</span>    <span class="token keyword">return</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//响应的结果进行转换处理</span>        <span class="token comment">//....</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> error<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//3. adapter 适配器</span><span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xhrAdapter 函数执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//发送 AJAX 请求</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定事件</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//判断成功的条件</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        <span class="token comment">//配置对象</span>                        config<span class="token operator">:</span> config<span class="token punctuation">,</span>                        <span class="token comment">//响应体</span>                        data<span class="token operator">:</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">,</span>                        <span class="token comment">//响应头</span>                        headers<span class="token operator">:</span> xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//字符串  parseHeaders</span>                        <span class="token comment">// xhr 请求对象</span>                        request<span class="token operator">:</span> xhr<span class="token punctuation">,</span>                        <span class="token comment">//响应状态码</span>                        status<span class="token operator">:</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">,</span>                        <span class="token comment">//响应状态字符串</span>                        statusText<span class="token operator">:</span> xhr<span class="token punctuation">.</span>statusText                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment">//失败的状态</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请求失败 失败的状态码为'</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//4. 创建 axios 函数</span><span class="token keyword">let</span> axios <span class="token operator">=</span> <span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span><span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截器函数"><a href="#拦截器函数" class="headerlink" title="拦截器函数"></a>拦截器函数</h4><ol><li>说明: 调用 axios()并不是立即发送 ajax 请求, 而是需要经历一个较长的流程</li><li>流程: 请求拦截器2 =&gt; 请求拦截器1 =&gt; 发ajax请求 =&gt; 响应拦截器1 =&gt; 响<br>应拦截器 2 =&gt; 请求的回调</li><li>注意: 此流程是通过 promise 串连起来的, 请求拦截器传递的是 config, 响应<br>拦截器传递的是 response</li></ol><h4 id="拦截器模拟实现"><a href="#拦截器模拟实现" class="headerlink" title="拦截器模拟实现"></a>拦截器模拟实现</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//构造函数</span><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>        request<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        response<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//发送请求  难点与重点</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//创建一个 promise 对象</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个数组</span>    <span class="token keyword">const</span> chains <span class="token operator">=</span> <span class="token punctuation">[</span>dispatchRequest<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//处理拦截器</span>    <span class="token comment">//请求拦截器 将请求拦截器的回调 压入到 chains 的前面  request.handles = []</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        chains<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> item<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应拦截器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        chains<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> item<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// console.log(chains);</span>    <span class="token comment">//遍历</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>chains<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chains<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chains<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//发送请求</span><span class="token keyword">function</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//返回一个promise 队形，因为使用axios可以.then()</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            statusText<span class="token operator">:</span> <span class="token string">'OK'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建实例</span><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建axios函数</span><span class="token keyword">let</span> axios <span class="token operator">=</span> <span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 context 属性 config interceptors 添加至 axios 函数对象身上</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拦截器管理器构造函数，new时，对象上就带有handlers属性。</span><span class="token keyword">function</span> <span class="token function">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//只要调use，就将两个函数实例。压到数组里。</span><span class="token class-name">InterceptorManager</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fulfilled<span class="token punctuation">,</span> rejected</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        fulfilled<span class="token punctuation">,</span>        rejected    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//以下为功能测试代码</span><span class="token comment">// 设置请求拦截器  config 配置对象</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 成功 - 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 失败 - 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 成功 - 2号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 失败 - 2号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 成功 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 失败 1号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 成功 2号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 失败 2号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><ol><li>基本流程<br>配置 cancelToken 对象<br> 缓存用于取消请求的 cancel 函数<br> 在后面特定时机调用 cancel 函数取消请求<br> 在错误回调中判断如果 error 是 cancel, 做相应处理</li><li>实现功能<br>点击按钮, 取消某个正在请求中的请求</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取按钮</span><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明全局变量</span><span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span>btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//检测上一次的请求是否已经完成</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cancel <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//取消上一次的请求</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">,</span>        <span class="token comment">//1. 添加配置对象的属性</span>        cancelToken<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// executor 函数接收一个 cancel 函数作为参数</span>            <span class="token comment">//3. 将 c 的值赋值给 cancel</span><span class="token comment">//如果调用了cancel，c就调用，就相当于内部一个resolvePromise函数运行了，从而就导致new axios.CancelToken 实例出来的对象的promise属性发生了改变，进而影响到了xhr.js(发送ajax请求的根源)里面，调用request.abort()，如果请求时配置cancelToken,并且调用了cancel，就会一步一步最终调用request.abort().</span>                            cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 cancel 的值初始化</span>        cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//绑定第二个事件取消请求</span>btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟请求取消"><a href="#模拟请求取消" class="headerlink" title="模拟请求取消"></a>模拟请求取消</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//构造函数</span><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//原型 request 方法</span><span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//dispatchRequest 函数</span><span class="token keyword">function</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//xhrAdapter</span><span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送 AJAX 请求</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//实例化对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理结果</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//判断结果</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//设置为成功的状态</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        status<span class="token operator">:</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">,</span>                        statusText<span class="token operator">:</span> xhr<span class="token punctuation">.</span>statusText                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//关于取消请求的处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//对 cancelToken 对象身上的 promise 对象指定成功的回调</span>            config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将整体结果设置为失败</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请求已经被取消'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//创建 axios 函数</span><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token class-name">Axios</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CancelToken 构造函数</span><span class="token keyword">function</span> <span class="token function">CancelToken</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//声明一个变量</span>    <span class="token keyword">var</span> resolvePromise<span class="token punctuation">;</span>    <span class="token comment">//为实例对象添加属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//将 resolve 赋值给 resolvePromise</span>        resolvePromise <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用 executor 函数</span>    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//执行 resolvePromise 函数</span>        <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取按钮 以上为模拟实现的代码</span><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明全局变量</span><span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span>btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//检测上一次的请求是否已经完成</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cancel <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//取消上一次的请求</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//创建 cancelToken 的值</span>    <span class="token keyword">let</span> cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">,</span>        <span class="token comment">//1. 添加配置对象的属性</span>        cancelToken<span class="token operator">:</span> cancelToken    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 cancel 的值初始化</span>        cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios源码解析"><a href="#axios源码解析" class="headerlink" title="axios源码解析"></a>axios源码解析</h3><p>axios和Axios关系</p><h3 id="vuecil-3-代理配置"><a href="#vuecil-3-代理配置" class="headerlink" title="vuecil 3+代理配置"></a>vuecil 3+代理配置</h3><p>vue.config.js </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span> <span class="token punctuation">{</span>         overlay<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 让浏览器 overlay 同时显示警告和错误</span>           warnings<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           errors<span class="token operator">:</span> <span class="token boolean">true</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         host<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>         port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span> <span class="token comment">// 端口号</span>         https<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// https:{type:Boolean}</span>         open<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//配置后自动启动浏览器</span>         hotOnly<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 热更新</span>         <span class="token comment">// proxy: 'http://localhost:8080'   // 配置跨域处理,只有一个代理</span>         proxy<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//配置多个代理</span>             <span class="token string">"/testIp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                 target<span class="token operator">:</span> <span class="token string">"http://197.0.0.1:8088"</span><span class="token punctuation">,</span>                 changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//websocket支持</span>                 secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                 pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>                     <span class="token string">"^/testIp"</span><span class="token operator">:</span> <span class="token string">"/"</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token string">"/elseIp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                 target<span class="token operator">:</span> <span class="token string">"http://197.0.0.2:8088"</span><span class="token punctuation">,</span>                 changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">//ws: true,//websocket支持</span>                 secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                 pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>                     <span class="token string">"^/elseIp"</span><span class="token operator">:</span> <span class="token string">"/"</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有多后台，就可以在api文件夹下另外新建一个elseApi.js ，书写当前ip下的接口请求。方法同上，只是 let resquest = “/elseIp/request/“ 调用的时候把端口更改一下。vue.config.js其他详细的配置：</p><p>[]: <a href="https://blog.csdn.net/weixin_43216105/article/details/106763258">https://blog.csdn.net/weixin_43216105/article/details/106763258</a></p><h3 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h3><p>在项目src目录下新建utils文件夹，然后在其中新建 request.js文件，这个文件是主要书写axios的封装过程在项目src目录下新建utils文件夹，然后在其中新建 request.js文件，这个文件是主要书写axios的封装过程</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/****   request.js   ****/</span><span class="token comment">// 导入axios</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">// 使用element-ui Message做消息提醒</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Message<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token comment">//1. 创建新的axios实例，</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 公共接口--这里注意后面会讲</span>  baseURL<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_API</span><span class="token punctuation">,</span>  <span class="token comment">// 超时时间 单位是ms，这里设置了3s的超时时间</span>  timeout<span class="token operator">:</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 2.请求拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">//发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加</span>   config<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数据转化,也可以使用qs转换  JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。</span>   config<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'Content-Type'</span><span class="token operator">:</span><span class="token string">'application/x-www-form-urlencoded'</span>        <span class="token comment">//配置请求头</span>   <span class="token punctuation">}</span>   <span class="token comment">//注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie</span>   <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">'名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里取token之前，你肯定需要先拿到token,存一下</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>      config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'token'</span><span class="token operator">:</span>token<span class="token punctuation">}</span> <span class="token comment">//如果要求携带在参数中</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token operator">=</span> token<span class="token punctuation">;</span> <span class="token comment">//如果要求携带在请求头中</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.响应拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">//接收到响应数据并成功后的一些共有的处理，关闭loading等</span>  <span class="token keyword">return</span> response<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">/***** 接收到异常响应的处理开始 *****/</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.公共错误处理</span>    <span class="token comment">// 2.根据响应码具体处理</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'错误请求'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'未授权，请重新登录'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'拒绝访问'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'请求错误,未找到该资源'</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/NotFound"</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">405</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'请求方法未允许'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">408</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'请求超时'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'服务器端出错'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">501</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'网络未实现'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">502</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'网络错误'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">503</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'服务不可用'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">504</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'网络超时'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">505</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'http版本不支持该请求'</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">连接错误</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 超时处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'服务器响应超时，请刷新当前页'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'连接服务器失败'</span>  <span class="token punctuation">}</span>  Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token comment">/***** 处理结束 *****/</span>  <span class="token comment">//如果不需要错误处理，以上的处理过程都可省略</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//4.导入文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="封装请求http-js"><a href="#封装请求http-js" class="headerlink" title="封装请求http.js"></a>封装请求http.js</h4><p>在项目src目录下的utils文件夹中新建 http.js文件，这个文件是主要书写几种请求的封装过程。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/****   http.js   ****/</span><span class="token comment">// 导入封装好的axios实例</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'./request'</span><span class="token keyword">const</span> http <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token comment">/**     * methods: 请求     * @param url 请求地址      * @param params 请求参数     */</span>    <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url<span class="token operator">:</span>url        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> config<span class="token punctuation">.</span>params <span class="token operator">=</span> params        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            url<span class="token operator">:</span>url        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> config<span class="token punctuation">.</span>data <span class="token operator">=</span> params        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token operator">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>            url<span class="token operator">:</span>url        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> config<span class="token punctuation">.</span>params <span class="token operator">=</span> params        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token operator">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>            url<span class="token operator">:</span>url        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> config<span class="token punctuation">.</span>params <span class="token operator">=</span> params        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> http<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正式封装api-js"><a href="#正式封装api-js" class="headerlink" title="正式封装api.js"></a>正式封装api.js</h4><p>在项目src目录下新建api文件夹，然后在其中新建 api.js文件，这个文件是主要书写API的封装过程。</p><p>写法一：适合分类导出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">'../utils/http'</span><span class="token comment">// </span><span class="token comment">/** *  @parms resquest 请求地址 例如：http://197.82.15.15:8088/request/... *  @param '/testIp'代表vue-cil中config，index.js中配置的代理 */</span><span class="token keyword">let</span> resquest <span class="token operator">=</span> <span class="token string">"/testIp/request/"</span><span class="token comment">// get请求</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getListAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/getList.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// post请求</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">postFormAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/postForm.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// put 请求</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">putSomeAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/putSome.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// delete 请求</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deleteListAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/deleteList.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写法二：使用全部导出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">'../utils/http'</span><span class="token comment">// </span><span class="token comment">/** *  @parms resquest 请求地址 例如：http://197.82.15.15:8088/request/... *  @param '/testIp'代表vue-cil中config，index.js中配置的代理 */</span><span class="token keyword">let</span> resquest <span class="token operator">=</span> <span class="token string">"/testIp/request/"</span><span class="token comment">// get请求</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span> <span class="token function">getListAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/getList.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">postFormAPI</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resquest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/postForm.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个项目中如果后台请求不是同一个ip，而是多个ip的时候，可以在api文件夹下建立多个js，用来调用请求。</p><p>在之前封装公共接口的baseUrl时候，用了<code>webpack</code>中的全局变量<code>process.env.BASE_API</code>，而不是直接写死ip，也是为了适应多个后台或者开发的时候的api地址和发布的时候的api地址不一样这种情况。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建新的axios实例，</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_API</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vue中调用"><a href="#vue中调用" class="headerlink" title="vue中调用"></a>vue中调用</h4><p>方法一</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>getListAPI<span class="token punctuation">,</span>postFormAPI<span class="token punctuation">,</span> putSomeAPI<span class="token punctuation">,</span> deleteListAPI<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/api'</span> methods<span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token comment">//promise调用，链式调用， getList()括号内只接受参数；</span>     <span class="token comment">//   get不传参</span>     <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">getListAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//post传参</span>     <span class="token function">postForm</span><span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> data <span class="token operator">=</span> formData       <span class="token function">postFormAPI</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//async await同步调用</span>     <span class="token keyword">async</span> <span class="token function">postForm</span><span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> postRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postFormAPI</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span>       <span class="token keyword">const</span> putRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">putSomeAPI</span><span class="token punctuation">(</span><span class="token punctuation">{</span>data<span class="token operator">:</span> <span class="token string">'putTest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token keyword">const</span> deleteRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">deleteListAPI</span><span class="token punctuation">(</span>formData<span class="token punctuation">.</span>name<span class="token punctuation">)</span>       <span class="token comment">// 数据处理</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>postRes<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>putRes<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deleteRes<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二 ：把api全部导入，然后用哪个调用哪个api——适用于全部导出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">'@/api/api'</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     api<span class="token punctuation">.</span><span class="token function">getListAPI</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       <span class="token comment">//数据处理</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求重复取消"><a href="#请求重复取消" class="headerlink" title="请求重复取消"></a>请求重复取消</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//限于篇幅，省略一些导入和axios实例化代码，</span><span class="token comment">//...</span><span class="token keyword">const</span> awaitRequets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 保存重复请求队列</span><span class="token comment">// 请求拦截器</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 区别请求的唯一标识，用方法名+请求路径</span>    <span class="token keyword">const</span> requestMark <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> markIndex <span class="token operator">=</span> awaitRequets<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> requestMark<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>markIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 取消上个重复的请求</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'取消'</span><span class="token punctuation">,</span> awaitRequets<span class="token punctuation">,</span> markIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>      awaitRequets<span class="token punctuation">[</span>markIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'还就那个无情取消~~~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 删掉在awaitRequets中的请求标识</span>      awaitRequets<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>markIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span>    <span class="token keyword">const</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> source<span class="token punctuation">.</span>token<span class="token punctuation">;</span>    <span class="token comment">// 设置自定义配置requestMark项，主要用于响应拦截中</span>    config<span class="token punctuation">.</span>requestMark <span class="token operator">=</span> requestMark<span class="token punctuation">;</span>    <span class="token comment">// 记录本次请求的标识</span>    awaitRequets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> requestMark<span class="token punctuation">,</span> cancel<span class="token operator">:</span> source<span class="token punctuation">.</span>cancel <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 响应拦截器</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s 响应拦截器： '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> res    <span class="token comment">// 根据请求拦截里设置的requestMark配置来寻找对应awaitRequets里对应的请求标识,</span>    <span class="token comment">// 如果状态码为非2xx,在错误拦截函数里也需要做响应的处理</span>    <span class="token keyword">const</span> markIndex <span class="token operator">=</span> awaitRequets<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> res<span class="token punctuation">.</span>config<span class="token punctuation">.</span>requestMark<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 删除以更新 awatRequests</span>    markIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> awaitRequets<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>markIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> error<span class="token punctuation">.</span>message<span class="token operator">?</span> error<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'e响应拦截器： '</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> config<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果被取消了，response 不存在的，下面会报错</span>      <span class="token keyword">const</span> markIndex <span class="token operator">=</span> awaitRequets<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>requestMark<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 删除以更新 awatRequests</span>      markIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> awaitRequets<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>markIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果是主动取消了请求，做个标识</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'主动取消！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 利用这个</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 下面error.responce也就是axios.then().catch(data =&gt; xxx)里的data，</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="token过期重试"><a href="#token过期重试" class="headerlink" title="token过期重试"></a>token过期重试</h4><p><strong>场景</strong>： 在token过期的时候，可能需要刷新token,再重新请求<br>与后端约定 <code>code === 401</code> 就是token过期。然后需要将过期的请求重新发出。</p><table><thead><tr><th><strong>方案</strong></th><th></th></tr></thead><tbody><tr><td>在响应拦截器里将所有过期请求保存起来刷新token后再重新请求</td><td><strong>优</strong>：由服务器判断请求是否过期，无需自己判断；<strong>劣</strong>： 需要多请求一次</td></tr><tr><td>在请求拦截器里将过期请求挂起，刷新token后再重新请求</td><td><strong>优</strong>： 省流，过期的请求不会发出；<strong>劣</strong>：需要根据时间戳来判断token是否过期，存在不正确性</td></tr></tbody></table><p>在响应拦截器里 return instance(config) 就会重试请求，在错误处理函数里也是如此<br>在响应拦截器里 return new Promise(resolve =&gt; {}) 就会将该请求挂起，不会有返回值(不会触发使用时 .then 里的回调)。此时请求已经发出并得到响应</p><p>originAxios.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// token刷新 单写是为了重刷token时不重复执行,且不进入拦截器的处理。</span><span class="token comment">// 以上可以通过在拦截器匹配url来实现。但我这里涉及到vuex的数据更新，太多判断索性就拎出来了！</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span>token <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> authUrl <span class="token operator">=</span> isProd <span class="token operator">?</span> reqUrl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> reqUrl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rToken <span class="token operator">=</span> token <span class="token operator">||</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>refresh_token<span class="token punctuation">;</span>    <span class="token keyword">const</span> aToken <span class="token operator">=</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/refresh-token/'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            baseURL<span class="token operator">:</span> authUrl<span class="token punctuation">,</span>            params<span class="token operator">:</span> <span class="token punctuation">{</span> token<span class="token operator">:</span> rToken <span class="token punctuation">}</span><span class="token punctuation">,</span>            headers<span class="token operator">:</span> <span class="token punctuation">{</span> Authorization<span class="token operator">:</span> <span class="token string">'JWT '</span> <span class="token operator">+</span> aToken <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"user/UPDATE_USER_INFO"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> flag<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>res <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> flag<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>res <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> resp <span class="token operator">=</span> e<span class="token punctuation">.</span>response<span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> flag<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>resp <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 退出函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">+</span> <span class="token keyword">import</span> <span class="token punctuation">{</span> refreshToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./originAxios.js"</span><span class="token punctuation">;</span><span class="token comment">//token刷新标识与重试队列（函数）</span><span class="token operator">+</span> <span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 响应拦截器</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 以下为改动的地方，方便复制粘贴，这里就不加 + 了</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span><span class="token punctuation">{</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res1  <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>flag<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment">// 将config的url与baseUrl重新配置就可以具体配置取消哪个请求</span>        <span class="token comment">//为了确保当前过期请求可重新执行，改为微任务执行。 </span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行那些 刷新tokens时 被挂起的请求</span>          requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">// 为了保证401请求顺序执行，删除下面。</span>          <span class="token comment">// return instance(res.config)</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token function">errorHandle</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token comment">// token刷新失败</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 为了保证401请求顺序执行，略作修改。</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">instance</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">errorHandle</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> error<span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 上面的刷新token代码 }</span>    <span class="token keyword">else</span> <span class="token function">errorHandle</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> 、<span class="token comment">//其他错误进入错误处理</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2021/11/15/css/"/>
      <url>/2021/11/15/css/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS（Cascading-Style-Sheet）"><a href="#CSS（Cascading-Style-Sheet）" class="headerlink" title="CSS（Cascading Style Sheet）"></a>CSS（Cascading Style Sheet）</h2><p>​        层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h3 id="CSS实例"><a href="#CSS实例" class="headerlink" title="CSS实例"></a>CSS实例</h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:</p><ul><li>选择器通常是您需要改变样式的 HTML 元素。</li><li>每条声明由一个属性和一个值组成。</li><li>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</li></ul><p>示例如下：p标签代表选择器；里面的每一行代表一个声明（一般一个声明放一行）；冒号左边是属性，冒号右边代表值，以分号结尾。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>​        要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul><li>ID选择器：id选择器使用“#”进行标识，后面紧跟id名，基本语法格式：<code>#id名 { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></li><li>类选择器：类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式：<code>.类名 { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></li><li>标签选择器：标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式：<code>标签名 { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></li><li>通配符选择器：通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式：<code>\* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>E[attr] ：具有attr属性的E元素</li><li>E[attr=”val”] ：具有attr属性且属性等于val的元素</li></ul><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>CSS 伪类用于向某些选择器添加特殊的效果。</p><ul><li>伪类存在的意义是为了通过选择器找到那些不存在于DOM树中的信息以及不能被常规CSS选择器获取到的信息。</li><li>伪类由一个冒号:开头，冒号后面是伪类的名称和包含在圆括号中的可选参数。</li><li>任何常规选择器可以在任何位置使用伪类。伪类语法不区别大小写。一些伪类的作用会互斥，另外一些伪类可以同时被同一个元素使用。并且，为了满足用户在操作DOM时产生的DOM结构改变，伪类也可以是动态的。</li></ul><p>常见伪类</p><ul><li>:link 未访问的链接</li><li>:visited 已访问的链接</li><li>:hover 鼠标悬停链接</li><li>:active 已选择的链接</li><li>:first-child 该元素是另一个元素的第一个子元素。<code>p:first-child {color: blue;}选择器匹配作为任何元素的第一个子元素的任何 &lt;p&gt; 元素; p i:first-child {color: blue;} 选择器匹配所有 &lt;p&gt; 元素中的第一个 &lt;i&gt; 元素： </code></li><li>:last-child 该元素是另一个元素的最后一个子元素。</li><li>:focus 向拥有键盘输入焦点的元素添加样式</li><li>:lang 伪类允许您为不同的语言定义特殊的规则。</li></ul><h4 id="结构-位置-伪类选择器"><a href="#结构-位置-伪类选择器" class="headerlink" title="结构(位置)伪类选择器"></a>结构(位置)伪类选择器</h4><ul><li>:first-child ：选取属于其父元素的首个子元素的指定选择器</li><li>:last-child ：选取属于其父元素的最后一个子元素的指定选择器<ul><li>:nth-child(n) ：匹配属于其父元素的第 N 个子元素，不论元素的类型 <code> p:nth-child(2)     选择所有 p 元素的父元素的第二个子元素</code></li></ul></li><li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。</li><li>:nth-child(odd) ：选择第偶数个孩子</li><li>:nth-child(even) ：选择第奇数个孩子</li></ul><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>伪元素 (两个冒号::开头)</p><p>CSS 伪元素用于向某些选择器设置特殊效果。</p><ul><li>伪元素在DOM树中创建了一些抽象元素，这些抽象元素是不存在于文档语言里的（可以理解为html源码）。比如：document接口不提供访问元素内容的第一个字或者第一行的机制，而伪元素可以使开发者提取到这些信息。并且，一些伪元素可以使开发者获取到不存在于源文档中的内容（比如常见的::before，::after）。</li><li>伪元素的由两个冒号::开头，然后是伪元素的名称。</li><li>使用两个冒号::是为了区分伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性，CSS2中已存的伪元素仍然可以使用一个冒号:的语法，但是CSS3中新增的伪元素必须使用两个冒号::。</li><li>一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后。</li></ul><p>常见伪元素</p><ul><li>::before 在元素之前添加内容</li><li>::after 在元素之后添加内容</li><li>::first-line 伪元素用于向文本的首行添加特殊样式。</li><li>::first-letter 伪元素用于向文本的首字母添加特殊样式。</li></ul><h4 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h4><p>​        所谓层叠性是指多种CSS样式的叠加。是浏览器处理样式冲突的一个能力，如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉。</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时就出现了一个标签指定了同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 哪个样式离着结构近，就执行哪个样式。</li><li>样式不冲突，不会层叠。</li></ol><h4 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h4><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是：子承父业。</p><p>CSS最后的执行口诀：龙生龙，凤生凤，老鼠生的孩子会打洞。</p><h4 id="CSS优先级（选择器权重及其优先级）"><a href="#CSS优先级（选择器权重及其优先级）" class="headerlink" title="CSS优先级（选择器权重及其优先级）"></a>CSS优先级（选择器权重及其优先级）</h4><table><thead><tr><th>选择器格式</th><th>优先级</th><th>权重</th></tr></thead><tbody><tr><td>id选择器</td><td>#id</td><td>100</td></tr><tr><td>类选择器</td><td>#classname</td><td>10</td></tr><tr><td>属性选择器</td><td>a[ref=“eee”]</td><td>10</td></tr><tr><td>伪类选择器</td><td>li:last-child</td><td>10</td></tr><tr><td>标签选择器</td><td>div</td><td>1</td></tr><tr><td>伪元素选择器</td><td>li:after</td><td>1</td></tr><tr><td>相邻兄弟选择器</td><td>h1+p</td><td>0</td></tr><tr><td>子选择器</td><td>ul&gt;li</td><td>0</td></tr><tr><td>后代选择器</td><td>a</td><td>0</td></tr><tr><td>通配符选择器</td><td>*</td><td>0</td></tr></tbody></table><p>对于选择器的优先级：</p><ul><li>标签选择器、伪元素选择器：1</li><li>类选择器、伪类选择器、属性选择器：10</li><li>id 选择器：100</li><li>内联样式（行内）：1000</li></ul><p>注意事项：</p><ul><li>!important声明的样式的优先级最高；</li><li>如果优先级相同，则最后出现的样式生效；</li><li>继承得到的样式的优先级最低；</li><li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；</li><li>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</li></ul><h4 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h4><ul><li>子代选择器 ul &gt; li ：只能选中儿子，不能选中孙子辈或者更深层级的</li><li>后代选择器 ul   a ：可以选中所有后代，包括儿子孙子</li><li>相邻选择器 li + a ：选择到紧贴li标签后的一个a标签，注意！必须是紧挨着，中间隔了其他标签就不行</li><li>兄弟选择器 li ~ a ：选中li标签后的所有兄弟级别的a标签</li></ul><h3 id="常见样式"><a href="#常见样式" class="headerlink" title="常见样式"></a>常见样式</h3><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><strong>font-size: 字号大小</strong></p><p><strong>font-family: 字体</strong></p><p><strong>font-weight: 字体粗细</strong></p><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><ol><li>现在网页中普遍使用12px+。</li><li>尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</li><li>各种字体之间必须使用英文状态下的逗号隔开。</li><li>中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</li><li>如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: “Times New Roman”;。</li><li>尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</li></ol><p><strong>CSS Unicode 字体</strong></p><p>CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><ul><li>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</li><li>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li></ul><p><code>font-family: "\5FAE\8F6F\96C5\9ED1"; // 表示设置字体为“微软雅黑”。</code></p><p><strong>font-style: 字体风格</strong></p><p>字体倾斜除了用 i 和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><ul><li>normal：默认值，浏览器会显示标准的字体样式。</li><li>italic：浏览器会显示斜体的字体样式。</li><li>oblique：浏览器会显示倾斜的字体样式。</li></ul><p><strong>color: 文本颜色</strong></p><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><ol><li>预定义的颜色值，如red，green，blue等。</li><li>十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</li><li>RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</li></ol><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><p><strong>line-height: 行间距</strong>：一般情况下，行距比字号大7.8像素左右就可以了。</p><p><strong>text-align: 水平对齐方式</strong>：text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</p><ul><li>left：左对齐（默认值）</li><li>right：右对齐</li><li>center：居中对齐</li></ul><p><strong>text-indent: 首行缩进</strong>：text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p><code>1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度</code></p><p><strong>letter-spacing: 字间距</strong>：默认为normal。</p><p><strong>word-spacing: 单词间距</strong>：word-spacing属性用于定义英文单词之间的间距，对中文字符无效。</p><p>text-shadow:水平位置 垂直位置 模糊距离 阴影颜色;</p><h4 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--      background-color：背景颜色background-image：none | url (url)  背景图片background-repeat： repeat | no-repeat | repeat-x | repeat-y  背景图片的平铺方式background-position：top | center | bottom | left | center | right  设置背景图像的起始位置。background-attachment：  scroll | fixed背景图随滚动条的移动方式background-size:100% 100%;;指定背景图像的大小background-clip:规定背景的绘制区域。background-origin:规定背景图片的定位区域。--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span><span class="token punctuation">{</span> <span class="token property">height</span> <span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">div</span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span>1440px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>800px<span class="token punctuation">;</span> <span class="token property">background-color</span> <span class="token punctuation">:</span>red<span class="token punctuation">;</span>          <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./img/dog.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>         <span class="token property">background-repeat</span> <span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>         <span class="token property">background-position</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>         <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 1、img标签 ---→ img是一个标签，有默认宽高 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 2、div标签 + 背景图片 ---→ 背景图片仅仅只是装饰的CSS样式，不能撑开div标签 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>/* background-position: 水平方向位置 垂直方向位置; */background-position: center 50px;background: skyblue url('./images/1.jpg') no-repeat center center;/* background-position: center center; */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h4><p>em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。</p><ul><li>em： 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。</li><li>rem： rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。作用：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li></ul><h3 id="标签显示模式"><a href="#标签显示模式" class="headerlink" title="标签显示模式"></a>标签显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">常见的块元素有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>等，其中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>标签是最典型的块元素。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>块级元素的特点：</p><ul><li>（1）总是从新行开始</li><li>（2）高度，行高、外边距以及内边距都可以控制。</li><li>（3）宽度默认是容器的100%</li><li>（4）可以容纳内联元素和其他块元素。</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">常见的行内元素有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>等，其中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>标签最典型的行内元素。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>行内元素的特点：</p><ul><li>（1）和相邻行内元素在一行上。</li><li>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</li><li>（3）默认宽度就是它本身内容的宽度。</li><li>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</li></ul><p><code>只有文字才能组成段落因此 p 里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。链接里面不能再放链接。</code></p><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>行内块元素的特点：</p><ul><li>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</li><li>（2）默认宽度就是它本身内容的宽度。</li><li>（3）高度，行高、外边距以及内边距都可以控制。</li></ul><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--组成 : content -&gt; padding -&gt; border -&gt; margin        物品        填充物     包装盒      盒子与盒子之间的间距content : 内容区域  width和height组成的padding : 内边距(内填充)只写一个值： 30px (上下左右)写两个值 : 30px 40px ( 上下、左右 )写四个值 : 30px 40px 50px 60px（上、右、下、左）margin : 外边距(外填充)只写一个值： 30px (上下左右)写两个值 : 30px 40px ( 上下、左右 )写四个值 : 30px 40px 50px 60px（上、右、下、左）注：1. 背景色填充到margin以内的区域 （不包括margin区域）    2. 文字在content区域添加。3. padding不能为负数，而margin可以为负数。box-sizing:（取值content-box；border-box）盒尺寸，可以改变盒子模型的展示形态。默认值： content-box 设置的 width、height 是针对 content区域的border-box 设置的width、height 是针对content padding border这三个区域的；使用的场景：    1. 不用再去计算一些值 2. 解决一些百分比的问题注意：背景颜色会填充到margin以内的区域；文字会在content区域padding不能出现负值，margin是可以出现负值的。盒子模型的一些问题：1. margin叠加问题，出现在上下margin同时存在的时候。会取上下中值较大的作为叠加的值。（只给一个元素添加边距就好）2. margin传递问题，出现在嵌套的结构中，只是针对margin-top的问题。（给子元素加margin-top，会导致父元素也跟着下来。）扩展：1. margin左右自适应是可以的 ，但是上下自适应是不行的。margin: 0 auto2. width、height不设置的时候，对盒子模型的影响，会自动去计算容器的大小，节省代码。--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h4><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> // 没有边框即忽略所有边框的宽度（默认值）<span class="token property">border</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span> // 边框为单实线<span class="token punctuation">(</span>最为常用的<span class="token punctuation">)</span><span class="token property">border</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span> // 边框为虚线<span class="token property">border</span><span class="token punctuation">:</span> dotted<span class="token punctuation">;</span> // 边框为点线<span class="token property">border</span><span class="token punctuation">:</span> double<span class="token punctuation">;</span> // 边框为双实线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>圆角边框</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> 左上角  右上角  右下角  左下角<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h4><p>padding属性用于设置内边距。是指 边框与内容 之间的距离。</p><h4 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h4><p>margin属性用于设置外边距。设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><p><strong>外边距实现盒子居中（常用于版心居中）</strong></p><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。</li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给 左右的外边距都设置为auto ，就可使块级元素水平居中。</p><p><strong>文字盒子居中图片和背景区别</strong></p><ol><li>文字水平居中是 text-align: center</li><li>盒子水平居中 左右margin 改为 auto</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/*  文字居中水平 */</span><span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span>  <span class="token comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>content宽度和高度</strong></p><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/*外盒尺寸计算（元素空间尺寸）*/Element空间高度 = content height + padding + border + marginElement 空间宽度 = content width + padding + border + margin/*内盒尺寸计算（元素实际大小）*/Element Height = content height + padding + border （Height为内容高度）Element Width = content width + padding + border （Width为内容宽度）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。<br>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。<br>3、如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小。</p><h4 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h4><p>IE盒模型的 content 包括 border、padding（content + border + padding）<br>标准盒模型的 content 等于元素本身的宽度和高度</p><p>盒子阴影 box-shadow: 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p><strong>哪些元素会具有BFC的条件</strong></p><p>不是所有的元素模式都能产生BFC，w3c 规范：</p><p>display 属性为 block, list-item, table 的元素，会产生BFC.</p><p>大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。</p><p>注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。</p><h4 id="BFC元素所具有的特性"><a href="#BFC元素所具有的特性" class="headerlink" title="BFC元素所具有的特性"></a><strong>BFC元素所具有的特性</strong></h4><p>BFC布局规则特性：</p><ol><li><p>在BFC中，盒子从顶端开始垂直地一个接一个地排列.</p></li><li><p>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p></li><li><p>在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p></li><li><p>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</p></li><li><p>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。<br>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p></li></ol><h4 id="BFC的主要用途"><a href="#BFC的主要用途" class="headerlink" title="BFC的主要用途"></a>BFC的主要用途</h4><p>(1) 清除元素内部浮动</p><p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p><p>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</p><p>(2) 解决外边距合并问题</p><p>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p><p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p><p>(3) 制作右侧自适应的盒子问题</p><p>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a><strong>边偏移</strong></h4><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><h4 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h4><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p>选择器{position:属性值;}</p><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h4 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 relative"></a>相对定位 relative</h4><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。</p><p>注意：</p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li></ol><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p><h4 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 absolute"></a>绝对定位 absolute</h4><p>如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意：绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><ul><li>父级没有定位：若所有父元素都没有定位，以浏览器为准对齐(document文档)。</li><li>父级有定位：绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li></ul><h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a><strong>子绝父相</strong></h4><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。父盒子布局时，需要占有位置，因此父亲只能是 相对定位.</p><p>定位让盒子水平垂直都居中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.son</span> <span class="token punctuation">{</span>      <span class="token comment">/* 1、子绝父相 */</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token comment">/* 2、让子盒子往右走大盒子一半 */</span>      <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>      <span class="token comment">/* 3、让子盒子往下走大盒子一半 */</span>      <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>      <span class="token comment">/* 4、让子盒子往左+往上走自己的一半 */</span>      <span class="token comment">/* transform: translateX(-50%); */</span>      <span class="token comment">/* transform: translateY(-50%); */</span>      <span class="token comment">/* 合写： */</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h4><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li></ol><h4 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h4><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><ol><li>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</li><li>如果取值相同，则根据书写顺序，后来居上。</li><li>后面数字一定不能加单位。</li><li>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</li></ol><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位</p><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table><h4 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a><strong>浮动详细内幕特性</strong></h4><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><p>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</p><p>总结：浮动的目的就是为了让多个块级元素同一行上显示。</p><h4 id="清除浮动-clear"><a href="#清除浮动-clear" class="headerlink" title="清除浮动 clear"></a>清除浮动 clear</h4><p>​        由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。准确地说，并不是清除浮动，而是清除浮动后造成的影响。如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p><h4 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a><strong>清除浮动的方法</strong></h4><ol><li><p>直接设置父元素的高度</p></li><li><p>额外标签法：</p><p>在父元素的最后添加一个块级元素、需要给添加的块级元素设置清除浮动的核心代码：clear：both、缺点：会在页面中添加额外的标签，会让页面的HTML结构变得复杂</p></li><li><p>使用after伪元素清除浮动：:after 方式为空元素的升级版，好处是不用单独加标签了</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">/* IE6、7 专有 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：content:”.” 里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><ol start="4"><li>使用before和after双伪元素清除浮动</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment">/* 这句话可以出发BFC BFC可以清除浮动 */</span><span class="token punctuation">}</span><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.clearfix</span> <span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h4><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现。</p><p><strong>display 显示</strong></p><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><p><strong>visibility 可见性</strong></p><p>设置或检索是否显示对象。</p><ul><li>visible : 　对象可视</li><li>hidden : 　对象隐藏</li></ul><p>特点： 隐藏之后，继续保留原有位置。</p><p><strong>overflow 溢出</strong></p><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><ul><li>visible : 　不剪切内容也不添加滚动条。</li><li>auto : 　 超出自动显示滚动条，不超出不显示滚动条</li><li>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</li><li>scroll : 　不管超出内容否，总是显示滚动条</li></ul><h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="鼠标样式-cursor"><a href="#鼠标样式-cursor" class="headerlink" title="鼠标样式 cursor"></a>鼠标样式 cursor</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>default</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是小白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是小手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>move</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>text</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h4><p>resize：none 这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">resize: none|both|horizontal|vertical;// 无法调整/可调整宽度和高度/可调整宽度/可调整高度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="垂直对齐-vertical-align"><a href="#垂直对齐-vertical-align" class="headerlink" title="垂直对齐 vertical-align"></a>垂直对齐 vertical-align</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">vertical-align : baseline |top |middle |bottom <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h4><p> 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p>解决的方法就是：</p><ol><li>给img vertical-align:middle | top等等。 让图片不要和基线对齐。</li><li>给img 添加 display：block; 转换为块级元素就不会存在问题了</li></ol><h4 id="文字溢出隐藏"><a href="#文字溢出隐藏" class="headerlink" title="文字溢出隐藏"></a>文字溢出隐藏</h4><p><strong>word-break:自动换行</strong></p><ul><li>normal 使用浏览器默认的换行规则。</li><li>break-all 允许在单词内换行。</li><li>keep-all 只能在半角空格或连字符处换行。</li></ul><p>主要处理英文单词</p><p><strong>white-space</strong></p><blockquote><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p></blockquote><ul><li>normal : 　默认处理方式</li><li>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</li></ul><p>可以处理中文</p><p><strong>text-overflow 文字溢出</strong></p><p>text-overflow : clip | ellipsis</p><ul><li>clip : 　不显示省略标记（…），而是简单的裁切</li><li>bellipsis : 　当对象内文本溢出时显示省略标记（…）</li></ul><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><h3 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h3><p>​        在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><p><code>transition: 要过渡的属性  花费时间  运动曲线  何时开始;</code></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td></tr></tbody></table><ul><li>如果想要所有的属性都变化过渡， 写一个all 就可以</li><li>transition-duration 花费时间 单位是 秒 s 比如 0.5s 这个s单位必须写 ms 毫秒</li><li>运动曲线 默认是 ease</li><li>何时开始 默认是 0s 立马开始</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token comment">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> width 0.6s ease 0s<span class="token punctuation">,</span> height 0.3s ease-in 1s<span class="token punctuation">;</span>    <span class="token comment">/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span><span class="token punctuation">}</span><span class="token selector">div:hover</span> <span class="token punctuation">{</span>  <span class="token comment">/* 鼠标经过盒子，我们的宽度变为400 */</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">}</span> <span class="token property">transition</span><span class="token punctuation">:</span> all 0.6s<span class="token punctuation">;</span>  <span class="token comment">/* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><h4 id="2D变形-transform"><a href="#2D变形-transform" class="headerlink" title="2D变形 transform"></a>2D变形 transform</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">translate</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> // 水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）<span class="token function">translateX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> // 仅水平方向移动（X轴移动）<span class="token function">translateY</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span> // 仅垂直方向移动（Y轴移动）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 scale(x, y)"></a><strong>缩放 scale(x, y)</strong></h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">scale</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span> // 使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）<span class="token function">scaleX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> // 元素仅水平方向缩放（X轴缩放）<span class="token function">scaleY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> // 元素仅垂直方向缩放（Y轴缩放）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="旋转-rotate-deg"><a href="#旋转-rotate-deg" class="headerlink" title="旋转 rotate(deg)"></a><strong>旋转 rotate(deg)</strong></h4><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；transform-origin可以调整元素转换变形的原点</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span> <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span><span class="token selector">div</span> <span class="token punctuation">{</span> <span class="token property">transform-origin</span><span class="token punctuation">:</span> 10px 10px<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3D变形-transform"><a href="#3D变形-transform" class="headerlink" title="3D变形 transform"></a>3D变形 transform</h4><p>transform:<br>       rotateX() : 正值向上翻转<br>       rotateY() : 正值向右翻转<br>       translateZ() : 正值向前，负值向后<br>       scaleZ() : 立体元素的厚度</p><p>3d写法<br>    scale3d() : 三个值 x y z<br>    translate3d() : 三个值 x y z<br>    rotate3d() : 四个值 0|1(x轴是否添加旋转角度)  0|1(y轴是否添加旋转角度)  0|1(z轴是否添加旋转角度)  deg</p><p>​    perspective（景深）: 离屏幕多远的距离去观察元素，值越大幅度越小。</p><p>​    perspective-origin : 景深-基点位置，观察元素的角度。</p><p>​    transform-origin: center center -50px;   （Z轴只能写数值，不能写单词）</p><p>​    transform-style : 3D空间<br>        flat  (默认值2d)、preserve-3d   (3d，产生一个三维空间)</p><p>​    backface-visibility : 背面隐藏<br>        hidden、visible (默认值)</p><h3 id="动画-keyframes"><a href="#动画-keyframes" class="headerlink" title="动画 @keyframes"></a>动画 @keyframes</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span>动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向<span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>  <span class="token selector">from</span><span class="token punctuation">{</span> 开始位置 <span class="token punctuation">}</span>  <span class="token selector">0%  to</span><span class="token punctuation">{</span>  结束  <span class="token punctuation">}</span>  100%<span class="token punctuation">}</span><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span>infinite<span class="token punctuation">;</span>  // 无限循环播放<span class="token property">animation-play-state</span><span class="token punctuation">:</span>paused<span class="token punctuation">;</span>  // 暂停动画"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2021/11/14/html/"/>
      <url>/2021/11/14/html/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="一、什么是HTML"><a href="#一、什么是HTML" class="headerlink" title="一、什么是HTML"></a>一、什么是HTML</h3><p>​        <code>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</code></p><p><img src="/.io//html1.jpg" alt="html页面图"></p><ul><li><code>&lt;!DOCTYPE html&gt; </code>声明为 HTML5 文档</li><li><code>&lt;html&gt; </code>元素是 HTML 页面的根元素</li><li><code>&lt;head&gt;</code>元素包含了文档的元（meta）数据，如 <code>&lt;meta charset="utf-8"&gt; </code>定义网页编码格式为 utf-8。</li><li><code>&lt;title&gt;</code>*元素描述了文档的标题</li><li><code>&lt;body&gt;</code>元素包含了可见的页面内容</li><li><code>&lt;h1&gt;</code> 元素定义一个大标题</li><li><code>&lt;p&gt;</code>元素定义一个段落</li></ul><h4 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h4><ol><li>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code> 标签来定义的。</li><li>请确保将 HTML 标题 标签只用于标题。不要仅仅是为了生成粗体或大号的文本而使用标题。</li><li>搜索引擎使用标题为您的网页的结构和内容编制索引。</li><li>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。</li><li>应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</li><li> 浏览器会自动地在标题的前后添加空行。</li></ol><h4 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h4><hr> 标签在 HTML 页面中创建水平线。hr 元素可用于分隔内容。<h4 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h4><p>HTML 段落是通过标签 <code>&lt;p&gt; </code>来定义的。</p><p>注意：浏览器会自动地在段落的前后添加空行。（<code>&lt;p&gt;</code> 是块级元素）</p><p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 <code>&lt;br&gt;</code> 标签</p><h4 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h4><p>HTML 链接是通过标签<code>&lt;a&gt;</code>来定义的。</p><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p><p>当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。</p><p>在标签 中使用了href属性来描述链接的地址。</p><h4 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h4><p>HTML 图像是通过标签 <code>&lt;img&gt; </code>来定义的.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这是一只摇头猫<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>震惊！小猫咪竟然会干这种事？<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- alt：替换文本当图片加载失败时（如：路径写错了），才显示的文字title：提示文本当鼠标悬停在图片上时，才显示的文字 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- loop：循环播放 autoplay：自动播放（部分浏览器不支持）controls：播放的控件  在谷歌浏览器中写muted可以完成静音的自动播放--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h4><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt; </code>标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt; </code>标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>评语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 表格的身体 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小哥哥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>100分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小哥哥真帅气<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小姐姐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>100分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>小姐姐真漂亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 表格的底部 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>总结<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>郎才女貌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>郎才女貌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML-输入框"><a href="#HTML-输入框" class="headerlink" title="HTML 输入框"></a>HTML 输入框</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 1、文本框：text（type属性的默认值） --&gt;</span>昵称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入您的昵称<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 2、密码框：password --&gt;</span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入您的密码<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 3、单选框：radio --&gt;</span>性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>男      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 4、多选框：checkbox --&gt;</span>爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>敲代码      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>熬夜      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>掉头发<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 5、文件选择：file --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 按钮 --&gt;</span><span class="token comment">&lt;!-- 1、submit：提交按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 2、reset：重置按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 3、button：普通按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>普通按钮<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML-下拉"><a href="#HTML-下拉" class="headerlink" title="HTML 下拉"></a>HTML 下拉</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- select：表示下拉菜单的整体 --&gt;</span><span class="token comment">&lt;!-- option：表示下拉菜单的每一项 --&gt;</span>所在城市：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML区块"><a href="#HTML区块" class="headerlink" title="HTML区块"></a>HTML区块</h4><p><strong>HTML 区块元素</strong>大多数 HTML 元素被定义为块级元素或内联元素。块级元素在浏览器显示时，通常会以新行来开始（和结束）。实例: <code>&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt; &lt;div&gt; </code></p><p><strong>HTML 内联元素</strong>在显示时通常不会以新行开始。实例: <code>&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;&lt;span&gt;</code></p><h4 id="HTML语义布局标签"><a href="#HTML语义布局标签" class="headerlink" title="HTML语义布局标签"></a>HTML语义布局标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 有语义的布局标签 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>网页的头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>网页的导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>网页的底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">&gt;</span></span>网页的侧边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span>网页的区块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span>网页的文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h4><p>表单是一个包含表单元素的区域。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。表单使用表单标签 <code>&lt;form&gt; </code>来设置:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo_form.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML5新元素"><a href="#HTML5新元素" class="headerlink" title="HTML5新元素"></a>HTML5新元素</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">&gt;</span></span> 新元素标签定义图形，比如图表和其他图像。该标签基于 JavaScript 的绘图 API<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> canvas<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">'#FF0000'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a>HTML5 内联 SVG</h4><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用于定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失<br>SVG 是万维网联盟的标准</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100,10 40,180 190,60 10,60 160,180<span class="token punctuation">"</span></span>   <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">fill</span><span class="token punctuation">:</span>lime<span class="token punctuation">;</span><span class="token property">stroke</span><span class="token punctuation">:</span>purple<span class="token punctuation">;</span><span class="token property">stroke-width</span><span class="token punctuation">:</span>5<span class="token punctuation">;</span><span class="token property">fill-rule</span><span class="token punctuation">:</span>evenodd<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML5的本地存储"><a href="#HTML5的本地存储" class="headerlink" title="HTML5的本地存储"></a>HTML5的本地存储</h4><p>​        在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题</p><ol><li>大小：cookie的大小被限制在4KB。</li><li>带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</li><li>复杂性：要正确的操纵cookie是很困难的。</li></ol><p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。WebStorage：两个主要目标：（1）提供一种在cookie之外存储会话数据的路径。（2）提供一种存储大量可以跨会话存在的数据的机制。</p><ol><li>localStorage：localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。</li><li>sessionStorage：sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</li></ol><table><thead><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr></thead><tbody><tr><td>数据生命周期</td><td>生成时就会指定一个maxAge值，这就是cookie的生命周期，在这个周期内cookie有效，默认关闭浏览器无效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4kb左右，因为每次http请求都会携带cookie</td><td>一般5MB或更大</td><td></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td>数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td><td></td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td>可用原生接口，也可自己封装对Object和Arrey更好的支持</td><td></td></tr><tr><td>共同点</td><td>都是保存在浏览器端，和服务器的sessin机制不同</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包</title>
      <link href="/2021/11/13/js-bi-bao/"/>
      <url>/2021/11/13/js-bi-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><ol><li>函数嵌套函数</li><li>内部函数引用到外部函数的变量或者形参</li><li>被引用的变量或者形参就不会被垃圾回收机制所回收，常驻内存。</li></ol><h3 id="闭包的好处"><a href="#闭包的好处" class="headerlink" title="闭包的好处"></a>闭包的好处</h3><ol><li>希望一个变量常驻内存（延长了变量生命周期）</li><li>避免全局变量的污染</li><li>声明私有变量</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">var</span> ccc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//私有变量</span>                  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      a<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是立即执行函数，前面是函数声明，后面的括号是函数调用。上面直接return了个函数给变量ccc.</span>              <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>              <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>              <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a is not defined </span><span class="token comment">// 每次函数调用完，函数里的变量和形参都会被垃圾回收机制给回收，但这次因内部函数引用了外部函数的变量，所以该变量的内存不会被回收，因此每次调用return回来的函数，变量a是一直存在的。还有一点就是，整个全局是没办法直接访问到，该函数下的变量a的。变量私有化，也可以说避免全局污染</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="理解闭包小案例"><a href="#理解闭包小案例" class="headerlink" title="理解闭包小案例"></a>理解闭包小案例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*     有一个团队，ABC三位员工，一起开发项目，避免全局变量污染。 */</span><span class="token comment">//A员工的代码和函数</span> <span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">//私有变量</span>     <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//私有方法</span>         count <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         count <span class="token operator">*=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//对外</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>         outA<span class="token operator">:</span> aaa<span class="token punctuation">,</span>         outB<span class="token operator">:</span> bbb     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> moduleA<span class="token punctuation">.</span><span class="token function">outA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//15</span> moduleA<span class="token punctuation">.</span><span class="token function">outB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//300</span><span class="token comment">//B员工代码和函数</span> <span class="token keyword">var</span> moduleB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         count <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         count <span class="token operator">*=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//对外</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>         outA<span class="token operator">:</span> aaa<span class="token punctuation">,</span>         outB<span class="token operator">:</span> bbb     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> moduleB<span class="token punctuation">.</span><span class="token function">outA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11</span> moduleB<span class="token punctuation">.</span><span class="token function">outB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//220</span><span class="token comment">//  alert(count);</span> <span class="token function">alert</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见闭包"><a href="#常见闭包" class="headerlink" title="常见闭包"></a>常见闭包</h3><ol><li> 将函数作为另一个函数的返回值。</li><li> 将函数作为实参传递给另一个函数调用。</li></ol><h3 id="闭包作用"><a href="#闭包作用" class="headerlink" title="闭包作用"></a>闭包作用</h3><ol><li>使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li><li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li></ol><h3 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h3><ol><li> 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</li><li> 死亡: 在嵌套的内部函数成为垃圾对象时</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//问题2: 此时闭包产生了吗? </span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fun2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//问题1: 此时闭包产生了吗?   </span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题3: 此时闭包释放了吗?  </span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题4: 此时闭包释放回收了吗?   </span><span class="token comment">//问题5: 如何让闭包释放回收呢?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包的应用：自定义js模块"><a href="#闭包的应用：自定义js模块" class="headerlink" title="闭包的应用：自定义js模块"></a>闭包的应用：自定义js模块</h3><ol><li>具有特定功能的js文件；</li><li>将所有的数据和功能都封装在一个函数的内部（私有）</li><li>只向外部暴露一个包，n个方法的对象或者函数</li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能。</li></ol><h3 id="闭包缺点"><a href="#闭包缺点" class="headerlink" title="闭包缺点"></a>闭包缺点</h3><ol><li><p>函数执行完后，数内的局部变量没有释放, 占用内存时间会变长；</p><p>容易造成内存泄露</p></li><li><p>能不用闭包就不用， 及时释放。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-视图组件</title>
      <link href="/2021/08/04/drf-shi-tu-zu-jian/drf-shi-tu-zu-jian/"/>
      <url>/2021/08/04/drf-shi-tu-zu-jian/drf-shi-tu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="视图组件"><a href="#视图组件" class="headerlink" title="视图组件"></a>视图组件</h1><h2 id="视图基类"><a href="#视图基类" class="headerlink" title="视图基类"></a>视图基类</h2><h3 id="1、APIView"><a href="#1、APIView" class="headerlink" title="1、APIView"></a>1、APIView</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">rest_framework<span class="token punctuation">.</span>views<span class="token punctuation">.</span>APIView<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        APIView 是rest-framework提供的所有视图的基类，继承自Django的View父类。</p><p>​        <strong>APIView 和 View的不同之处：</strong></p><p>​            a: 传入到视图方法中的是rest-framework的Request对象，而不是Django的HttpRequeset对象；</p><p>​            b: 视图方法可以返回rest-framework的Response对象，视图会为响应数据设置（render）符合前端要求的格式；<br>​            c: 任何APIException异常都会被捕获到，并且处理成合适的响应信息；<br>​            d: 在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制</p><p>​        <strong>支持定义属性</strong></p><ul><li><p>authentication_classes 列表或元组，身份认证类</p></li><li><p>permissoin_classes 列表或元组，权限检查类</p></li><li><p>throttle_classes 列表或元组，流量控制类</p><p><strong>在APIView中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment"># url(r'^books/$', views.BookListView.as_view()),</span><span class="token keyword">class</span> <span class="token class-name">BookListView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、GenericAPIView-通用视图类"><a href="#2、GenericAPIView-通用视图类" class="headerlink" title="2、GenericAPIView[通用视图类]"></a>2、GenericAPIView[通用视图类]</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">rest_framework<span class="token punctuation">.</span>generics<span class="token punctuation">.</span>GenericAPIView<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继承自APIView，主要增加了操作序列化器和数据库查询的方法，作用是为Mixin扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个Mixin扩展类。</p><p><strong>提供的关于序列化器使用的属性与方法</strong>:</p><p>​        属性：serializer_class 指明视图使用的序列化器</p><p>​        方法：</p><ol><li><p>get_serializer_class(self)</p><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。返回序列化器类，默认返回serializer_class</p><p>可以重写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_staff<span class="token punctuation">:</span>        <span class="token keyword">return</span> FullAccountSerializer    <span class="token keyword">return</span> BasicAccountSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="get-serializer-self-args-kwargs"><a href="#get-serializer-self-args-kwargs" class="headerlink" title="get_serializer(self, *args, **kwargs)"></a>get_serializer(self, *args, **kwargs)</h5><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># request 当前视图的请求对象</span><span class="token comment"># view 当前请求的类视图对象</span><span class="token comment"># format 当前请求期望返回的数据格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提供的关于数据库查询的属性与方法</strong></p><p>​        属性：queryset 指明使用的数据查询集</p><p>​        方法：</p><ol><li><p>get_queryset(self)</p><p>返回视图使用的查询集，主要用来提供给Mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回<code>queryset</code>属性</p><p>可以重写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user    <span class="token keyword">return</span> user<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>get_object(self)</p><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p>若详情访问的模型类对象不存在，会返回404。</p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get_object()方法根据pk参数查找queryset中的数据对象</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五个视图扩展类"><a href="#五个视图扩展类" class="headerlink" title="五个视图扩展类"></a>五个视图扩展类</h2><p>​        作用：提供了几种后端视图（对数据资源进行曾删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。这五个扩展类需要搭配GenericAPIView父类，因为五个扩展类的实现需要调用GenericAPIView提供的序列化器与数据库查询的方法。</p><h3 id="1、ListModelMixin"><a href="#1、ListModelMixin" class="headerlink" title="1、ListModelMixin"></a>1、ListModelMixin</h3><p>​        列表视图扩展类，提供list(request, *args, **kwargs)方法快速实现列表视图，返回200状态码。该Mixin的list方法会对数据进行过滤和分页。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    List a queryset.    """</span>    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 过滤</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 分页</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>queryset<span class="token punctuation">)</span>        <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>page<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>eg:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> ListModelMixin<span class="token keyword">class</span> <span class="token class-name">BookListView</span><span class="token punctuation">(</span>ListModelMixin<span class="token punctuation">,</span> GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''使用视图扩展类前def get(self,request):    # 获取数据    book_list =Book.objects.all()    response_msg={'code':1000,'msg':'成功'}    # 转换数据[序列化过程]    # 如果转换多个模型对象数据，则需要加上many=True    book_ser = BookSerializer(instance=book_list,many=True)    print( book_ser.data ) # 序列化器转换后的数据    response_msg['data']=book_ser.data    return Response(response_msg)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、CreateModelMixin"><a href="#2、CreateModelMixin" class="headerlink" title="2、CreateModelMixin"></a>2、CreateModelMixin</h3><p>​        创建视图扩展类，提供create(request, *args, **kwargs)方法快速实现创建资源视图，返回201状态码。该如果序列化器对前端发送的数据验证失败，返回400错误。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CreateModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取序列化器</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 验证</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 保存</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_success_headers<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_success_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'Location'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>api_settings<span class="token punctuation">.</span>URL_FIELD_NAME<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、RetrieveModelMixin"><a href="#3、RetrieveModelMixin" class="headerlink" title="3、RetrieveModelMixin"></a>3、RetrieveModelMixin</h3><p>​        详情视图扩展类，提供retrieve(request, *args, **kwargs)方法,可以快速实现返回一个存在的数据对象。</p><p>可以快速实现返回一个存在的数据对象。如果存在，返回200， 否则返回404。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RetrieveModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Retrieve a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取对象，会检查对象的权限</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>eg:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>retrieve<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-UpdateModelMixin"><a href="#4、-UpdateModelMixin" class="headerlink" title="4、 UpdateModelMixin"></a>4、 UpdateModelMixin</h3><p>​        更新视图扩展类，提供update(request, *args, kwargs)方法，可以快速实现更新一个存在的数据对象。同时也提供partial_update(request, *args, kwargs)方法，可以实现局部更新。成功返回200，序列化器校验数据失败时，返回400错误。</p><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpdateModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Update a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        partial <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'partial'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> partial<span class="token operator">=</span>partial<span class="token punctuation">)</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>perform_update<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token string">'_prefetched_objects_cache'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If 'prefetch_related' has been applied to a queryset, we need to</span>            <span class="token comment"># forcibly invalidate the prefetch cache on the instance.</span>            instance<span class="token punctuation">.</span>_prefetched_objects_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">partial_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        kwargs<span class="token punctuation">[</span><span class="token string">'partial'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、DestroyModelMixin"><a href="#5、DestroyModelMixin" class="headerlink" title="5、DestroyModelMixin"></a>5、DestroyModelMixin</h3><p>​        删除视图扩展类，提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。</p><p>成功返回204，不存在返回404。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DestroyModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Destroy a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>perform_destroy<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七个子类视图"><a href="#七个子类视图" class="headerlink" title="七个子类视图"></a>七个子类视图</h2><ol><li><strong>CreateAPIView</strong> ：提供 post 方法、继承自：GenericAPIView、CreateModelMixin</li><li><strong>ListAPIView</strong>  ：提供 get 方法、继承自：GenericAPIView、ListModelMixin</li><li><strong>RetrieveAPIView</strong>  ：提供 get 方法、继承自: GenericAPIView、RetrieveModelMixin</li><li><strong>DestoryAPIView</strong>  ：提供 delete 方法、继承自：GenericAPIView、DestoryModelMixin</li><li><strong>UpdateAPIView</strong> : 提供 put 和 patch 方法、继承自：GenericAPIView、UpdateModelMixin</li><li><strong>RetrieveUpdateAPIView</strong> ：提供 get、put、patch方法、继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</li><li><strong>RetrieveUpdateDestoryAPIView</strong>  ：提供 get、put、patch、delete方法、继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</li></ol><h2 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h2><p>​        使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中，ViewSet视图集类不再实现get()、post()等方法，而是实现动作 action 如 list() 、create() 等。视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上</p><ul><li>list() 提供一组数据</li><li>retrieve() 提供单个数据</li><li>create() 创建数据</li><li>update() 保存数据</li><li>destroy() 删除数据</li></ul><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>pk<span class="token punctuation">)</span>        <span class="token keyword">except</span> BookInfo<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_404_NOT_FOUND<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span><span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图集父类"><a href="#视图集父类" class="headerlink" title="视图集父类"></a>视图集父类</h2><h3 id="1、ViewSet"><a href="#1、ViewSet" class="headerlink" title="1、ViewSet"></a>1、ViewSet</h3><p>​            继承自APIView与ViewSetMixin，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典（如{‘get’:’list’}）的映射处理工作。在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h3 id="2、GenericViewSet"><a href="#2、GenericViewSet" class="headerlink" title="2、GenericViewSet"></a>2、GenericViewSet</h3><p>​            使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与GenericAPIView，所以还需要继承GenericAPIView。</p><p>​            GenericViewSet就帮助我们完成了这样的继承工作，继承自GenericAPIView与ViewSetMixin，在实现了调用as_view()时传入字典（如{‘get’:’list’}）的映射处理工作的同时，还提供了GenericAPIView提供的基础方法，可以直接搭配Mixin扩展类使用。</p><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> GenericViewSet<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、ModelViewSet"><a href="#3、ModelViewSet" class="headerlink" title="3、ModelViewSet"></a>3、ModelViewSet</h3><p>​        继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h3 id="4、ReadOnlyModelViewSet"><a href="#4、ReadOnlyModelViewSet" class="headerlink" title="4、ReadOnlyModelViewSet"></a>4、ReadOnlyModelViewSet</h3><p>​        继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin。</p><h3 id="视图集中自定义action动作"><a href="#视图集中自定义action动作" class="headerlink" title="视图集中自定义action动作"></a>视图集中自定义action动作</h3><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> GenericViewSet<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">latest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回最新的图书信息        """</span>        book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>latest<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        修改图书的阅读量数据        """</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        book<span class="token punctuation">.</span>bread <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/latest/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'latest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/read/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h3><p>​        在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet<span class="token punctuation">,</span>ReadOnlyModelViewSet<span class="token keyword">from</span> booktest<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoModelSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token keyword">def</span> <span class="token function">get_top_5</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取评论值最多的5条数据"""</span>        <span class="token comment"># 操作数据库</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token comment"># 获取本次请求的视图方法名</span>                通过路由访问到当前方法中<span class="token punctuation">.</span>可以看到本次的action就是请求的方法名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-请求与响应</title>
      <link href="/2021/08/04/drf-qing-qiu-yu-xiang-ying/drf-qing-qiu-yu-xiang-ying/"/>
      <url>/2021/08/04/drf-qing-qiu-yu-xiang-ying/drf-qing-qiu-yu-xiang-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h1><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>​            1 rest-framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是rest-framework 提供的扩展了HttpRequest类的Request类的对象</p><p>​            2 rest-framework  提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典[QueryDict]对象保存到Request对象中。</p><p>​            3 <strong>Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据</strong></p><h2 id="request常用属性"><a href="#request常用属性" class="headerlink" title="request常用属性"></a>request常用属性</h2><p>​        <strong>.data</strong></p><p>​            request.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和 request.FILES属性，但提供如下特性：</p><p>​            a: 包含了解析之后的文件和非文件数据<br>​            b: 包含了对POST、PUT、PATCH请求方式解析后的数据<br>​            c: 利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据</p><p><strong>.query_params</strong><br>        request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</p><h2 id="request源码分析"><a href="#request源码分析" class="headerlink" title="request源码分析"></a>request源码分析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># as_view()</span><span class="token comment"># 核心走了父类as_view</span>view <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>APIView<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>    <span class="token comment"># 返回的是局部禁用csrf认证的view视图函数</span>    <span class="token keyword">return</span> csrf_exempt<span class="token punctuation">(</span>view<span class="token punctuation">)</span>    <span class="token comment"># dispatch(self, request, *args, **kwargs)</span><span class="token comment"># 二次封装request对象</span>request <span class="token operator">=</span> self<span class="token punctuation">.</span>initialize_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment"># 自定义request规则</span>    self<span class="token punctuation">.</span>initial<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment"># initialize_request(self, request, *args, **kwargs)</span><span class="token comment"># 原生request封装在request._request</span>    <span class="token comment"># initial(self, request, *args, **kwargs)</span><span class="token comment"># 认证</span>self<span class="token punctuation">.</span>perform_authentication<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment"># 权限</span>    self<span class="token punctuation">.</span>check_permissions<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment"># 频率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>​            1. rest-framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p><p>​            2. rest-framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。可以在rest_framework.settings查找所有的drf默认配置项</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token comment"># 默认响应渲染类</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">,</span>  <span class="token comment"># json渲染器</span>        <span class="token string">'rest_framework.renderers.BrowsableAPIRenderer'</span><span class="token punctuation">,</span>  <span class="token comment"># 浏览API渲染器</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="response构造方式"><a href="#response构造方式" class="headerlink" title="response构造方式"></a>response构造方式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​            data数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用renderer渲染器处理data。</p><p>​            data不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用Serializer序列化器序列化处理后（转为了Python字典类型）再传递给data参数。</p><p>​            参数说明：</p><ul><li><p><code>data</code>: 为响应准备的序列化处理后的数据；</p></li><li><p><code>status</code>: 状态码，默认200</p></li><li><p><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</p></li><li><p><code>headers</code>: 用于存放响应头信息的字典；</p></li><li><p><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</p><p>​                    </p></li></ul><h3 id="response常用属性"><a href="#response常用属性" class="headerlink" title="response常用属性"></a>response常用属性</h3><ul><li>.data: 传给response对象的序列化后，但尚未render处理的数据</li><li>.status_code: 状态码数据</li><li>.content: 经过render处理后的响应数据</li></ul><h2 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span>  HTMLFormRenderer<span class="token punctuation">,</span>BrowsableAPIRenderer<span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    renderer_classes <span class="token operator">=</span> <span class="token punctuation">[</span>HTMLFormRenderer<span class="token punctuation">,</span>BrowsableAPIRenderer <span class="token punctuation">]</span> <span class="token comment">#直接在类里面配置</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_obj<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj <span class="token operator">=</span> models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>instance<span class="token operator">=</span>book_obj<span class="token punctuation">)</span>        <span class="token keyword">if</span> bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># update</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py中配置</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p> rest-framework在rest_framework.status模块中提供了常用状态码常量。</p><p>信息告知-1xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_100_CONTINUEHTTP_101_SWITCHING_PROTOCOLS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功-2xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_200_OKHTTP_201_CREATEDHTTP_202_ACCEPTEDHTTP_203_NON_AUTHORITATIVE_INFORMATIONHTTP_204_NO_CONTENTHTTP_205_RESET_CONTENTHTTP_206_PARTIAL_CONTENTHTTP_207_MULTI_STATUS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重定向-3xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_200_OKHTTP_201_CREATEDHTTP_202_ACCEPTEDHTTP_203_NON_AUTHORITATIVE_INFORMATIONHTTP_204_NO_CONTENTHTTP_205_RESET_CONTENTHTTP_206_PARTIAL_CONTENTHTTP_207_MULTI_STATUS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端错误-4xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_400_BAD_REQUESTHTTP_401_UNAUTHORIZEDHTTP_402_PAYMENT_REQUIREDHTTP_403_FORBIDDENHTTP_404_NOT_FOUNDHTTP_405_METHOD_NOT_ALLOWEDHTTP_406_NOT_ACCEPTABLEHTTP_407_PROXY_AUTHENTICATION_REQUIREDHTTP_408_REQUEST_TIMEOUTHTTP_409_CONFLICTHTTP_410_GONEHTTP_411_LENGTH_REQUIREDHTTP_412_PRECONDITION_FAILEDHTTP_413_REQUEST_ENTITY_TOO_LARGEHTTP_414_REQUEST_URI_TOO_LONGHTTP_415_UNSUPPORTED_MEDIA_TYPEHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLEHTTP_417_EXPECTATION_FAILEDHTTP_422_UNPROCESSABLE_ENTITYHTTP_423_LOCKEDHTTP_424_FAILED_DEPENDENCYHTTP_428_PRECONDITION_REQUIREDHTTP_429_TOO_MANY_REQUESTSHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGEHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器错误-5xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_500_INTERNAL_SERVER_ERRORHTTP_501_NOT_IMPLEMENTEDHTTP_502_BAD_GATEWAYHTTP_503_SERVICE_UNAVAILABLEHTTP_504_GATEWAY_TIMEOUTHTTP_505_HTTP_VERSION_NOT_SUPPORTEDHTTP_507_INSUFFICIENT_STORAGEHTTP_511_NETWORK_AUTHENTICATION_REQUIRED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之存储引擎</title>
      <link href="/2021/08/04/shu-ju-ku-zhi-cun-chu-yin-qing/shu-ju-ku-zhi-cun-chu-yin-qing/"/>
      <url>/2021/08/04/shu-ju-ku-zhi-cun-chu-yin-qing/shu-ju-ku-zhi-cun-chu-yin-qing/</url>
      
        <content type="html"><![CDATA[<h3 id="存储引擎（Storage-engine）"><a href="#存储引擎（Storage-engine）" class="headerlink" title="存储引擎（Storage engine）"></a>存储引擎（Storage engine）</h3><p>​        存储引擎说白了就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方<br>法。因为在关系数据库中数据的存储是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和<br>操作此表的类型）</p><p>​        在Oracle 和SQL Server等数据库中只有一种存储引擎，所有数据存储管理机制都是一样的。而MySql<br>数据库提供了多种存储引擎。用户可以根据不同的需求为数据表选择不同的存储引擎，用户也可以根据<br>自己的需要编写自己的存储引擎</p><h3 id="常用的存储引擎"><a href="#常用的存储引擎" class="headerlink" title="常用的存储引擎"></a>常用的存储引擎</h3><p>​        a: Innodb引擎：Innodb引擎提供了对数据库ACID事务的支持。并且还提供了行级锁和外键的约束。它的设计的目标就是处理大数据容量的数据库系统。<br>​        b: MyIASM引擎(原本Mysql的默认引擎)：不提供事务的支持，也不支持行级锁和外键。<br>​        c: MEMORY引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不高,在重启mysql或者重启机器后，表内数据清空</p><h3 id="innodb引擎的4大特性"><a href="#innodb引擎的4大特性" class="headerlink" title="innodb引擎的4大特性"></a>innodb引擎的4大特性</h3><p>​        1. 插入缓冲；2. 二次写入； 3. 自适应哈希索引； 4. 预读</p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>​        如果没有特别的需求，使用默认的Innodb即可。</p><p>​        MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p><p>​        Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键。比如OA自动化办公系统。</p><h3 id="使用存储引擎"><a href="#使用存储引擎" class="headerlink" title="使用存储引擎"></a>使用存储引擎</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 建表时直接指定</span>mysql<span class="token operator">&gt;</span> create table innodb_t1<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">,</span>name char<span class="token punctuation">)</span>engine<span class="token operator">=</span>innodb<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> create table innodb_t2<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">)</span>engine<span class="token operator">=</span>innodb<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> show create table innodb_t1<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> show create table innodb_t2<span class="token punctuation">;</span><span class="token comment"># 配置文件中指定</span> <span class="token operator">/</span>my<span class="token punctuation">.</span>ini<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>default<span class="token operator">-</span>storage<span class="token operator">-</span>engine<span class="token operator">=</span>INNODBinnodb_file_per_table<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库前戏</title>
      <link href="/2021/08/04/shu-ju-ku-qian-xi/shu-ju-ku-qian-xi/"/>
      <url>/2021/08/04/shu-ju-ku-qian-xi/shu-ju-ku-qian-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库前戏"><a href="#数据库前戏" class="headerlink" title="数据库前戏"></a>数据库前戏</h3><ol><li><p>为什么要使用数据库</p><ol><li>数据放在内存里，存取的速度快，但数据不能永久保存</li><li>数据放在文件内，数据可以永久保存，速度存取速度比内存慢，频繁IO操作；查询数据不方便</li><li>数据放在数据库中，数据永久保存，使用sql语句，查询方便效率高；管理数据方便。</li></ol></li><li><p>什么数据库</p><ol><li><p>数据库即存放数据的仓库，只不过这个仓库是在计算机存储设备上，而且数据是按一定的格式存放的</p></li><li><p>过去人们将数据存放在文件柜里，现在数据量庞大，已经不再适用</p></li><li><p>数据库是长期存放在计算机内、有组织、可共享的数据即可。</p></li><li><p>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种 用户共享</p></li></ol></li><li><p> 什么是数据库管理系统（DataBase Management System 简称DBMS）</p></li><li><p>如MySQL、Oracle、SQLite、Access、MS SQL Server</p></li><li><p>mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。sql server是微软公司的产品，主要应用于大中型企业，如联想、方正等。</p></li><li><p>数据库服务器、数据管理系统、数据库、表与记录的关系</p><p>​        数据库服务器：运行数据库管理软件；</p><p>​        数据库管理软件：管理-数据库、数据库：</p><p>​        即文件夹，用来组织文件/表；</p><p>​        表：即文件，用来存放多行内容/多条记录</p></li><li><p>数据库系统有以下优点：</p><p>​    　a：数据的安全性保护 b：数据的完整性检查 c：并发控制 d：数据库恢复</p></li></ol><h3 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL"></a>什么是MySQL</h3><p>​        MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>mysql</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#mysql就是一个基于socket编写的C/S架构的软件</span><span class="token comment">#客户端软件</span>　　mysql自带：如mysql命令，mysqldump命令等　　python模块：如pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据库管理软件分类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#分两大类：</span>　　关系型：如sqllite，db2，oracle，access，sql server，MySQL，注意：sql语句通用　　非关系型：mongodb，redis，memcache<span class="token comment">#可以简单的理解为：</span>    关系型数据库需要有表结构    非关系型数据库是key<span class="token operator">-</span>value存储的，没有表结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>​        SQL语句是结构化查询语言(Structured Query Language)简称SQL，是一种数据库查询语言。</p><p>​        作用：用于存取数据、查询、更新和管理关系数据库系统。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">SQL语言主要用于存取数据、查询数据、更新数据和管理关系数据库系统<span class="token punctuation">,</span>SQL语言由IBM开发。SQL语言分为<span class="token number">3</span>种类型：<span class="token comment">#1、DDL语句    数据库定义语言： 数据库、表、视图、索引、存储过程，例如CREATE DROP ALTER</span><span class="token comment">#2、DML语句    数据库操纵语言： 插入数据INSERT、删除数据DELETE、更新数据UPDATE、查询数据SELECT</span><span class="token comment">#3、DCL语句    数据库控制语言： 例如控制用户的访问权限GRANT、REVOKE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sql语句尝试</span><span class="token comment">#1. 操作文件夹</span>        增：create database db1 charset utf8<span class="token punctuation">;</span>        查：show databases<span class="token punctuation">;</span>        改：alter database db1 charset latin1<span class="token punctuation">;</span>        删除<span class="token punctuation">:</span> drop database db1<span class="token punctuation">;</span><span class="token comment">#2. 操作文件</span>    先切换到文件夹下：use db1        增：create table t1<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">,</span>name char<span class="token punctuation">)</span><span class="token punctuation">;</span>        查：show tables        改：alter table t1 modify name char<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              alter table t1 change name name1 char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        删：drop table t1<span class="token punctuation">;</span>    <span class="token comment">#3. 操作文件中的内容/记录</span>        增：insert into t1 values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'egon1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'egon2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'egon3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        查：select <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>        改：update t1 <span class="token builtin">set</span> name<span class="token operator">=</span><span class="token string">'sb'</span> where <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        删：delete <span class="token keyword">from</span> t1 where <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        清空表：            delete <span class="token keyword">from</span> t1<span class="token punctuation">;</span> <span class="token comment">#如果有自增id，新增的数据，仍然是以删除前的最后一样作为起始。</span>            truncate table t1<span class="token punctuation">;</span>数据量大，删除速度比上一条快，且直接从零开始，            auto_increment 表示：自增            primary key 表示：约束（不能重复且不能为空）；加速查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-序列化</title>
      <link href="/2021/07/31/xu-lie-hua-zu-jian/"/>
      <url>/2021/07/31/xu-lie-hua-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>8.3  学习内容—序列化组件</p><h4 id="序列化器Serializer介绍"><a href="#序列化器Serializer介绍" class="headerlink" title="序列化器Serializer介绍"></a>序列化器Serializer介绍</h4><ol><li><p>序列化，序列化器会把模型对象转成字典经过response变成jason格式。</p></li><li><p>反序列化：把客户端发过来的数据，经过request变成字典，序列化器可以把字典转成模型。</p></li><li><p>反序列化，完成数据校验功能。</p></li><li><p>跟forms组件类似。</p></li></ol><h4 id="Serializer的构造方法为"><a href="#Serializer的构造方法为" class="headerlink" title="Serializer的构造方法为"></a>Serializer的构造方法为</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">Serializer<span class="token punctuation">(</span>instance<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span>empty<span class="token punctuation">,</span> <span class="token operator">**</span>kwarg<span class="token punctuation">)</span>serializer <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>book<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 用于序列化时，将模型类对象传入instance参数</span><span class="token comment"># 用于反序列化时，将要被反序列化的数据传入data参数</span><span class="token comment"># 除了instance和data参数外，在构造Serializer对象时，还可通过context参数额外添加数据,通过context参数附加的数据，可以通过Serializer对象的context属性获取。</span><span class="token comment"># 使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</span><span class="token comment"># 序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</span><span class="token comment"># 序列化器的字段声明类似于我们前面使用过的表单系统。</span><span class="token comment"># drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><h4 id="简单使用序列化器"><a href="#简单使用序列化器" class="headerlink" title="简单使用序列化器"></a>简单使用序列化器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''序列化器的使用分两个阶段：1. 在客户端请求时，使用序列化器可以完成对数据的反序列化。2. 在服务器响应时，使用序列化器可以完成对数据的序列化。'''</span><span class="token comment">#1 写一个序列化的类，继承Serializer</span><span class="token comment">#2 在类中写要序列化的字段，想序列化哪个字段就在类中写哪个字段</span><span class="token comment">#3 在视图类中使用，导入--》实例化得到序列化类的对像，把要序列化的对像传入</span><span class="token comment">#4 序列化类的对像.data 是一个字典</span><span class="token comment"># models.py 创建表</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''~~~'''</span><span class="token comment"># ser.py</span><span class="token comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于 Serializer</span><span class="token comment"># 其中，ModelSerializer是Serializer的子类，ModelSerializer在Serializer的基础上进行了代码简化</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">BookSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 需要进行数据转换的字段</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''等需要序列化的字段'''</span><span class="token comment"># url.py</span><span class="token keyword">from</span> dajango<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> app01 <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>re_path<span class="token punctuation">(</span><span class="token string">'books/(?P&lt;pk&gt;\d+)'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>Bookview<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> app01<span class="token punctuation">.</span>ser <span class="token keyword">import</span> BookSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">BookView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        book_ser <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>book_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要序列化的数据有多条Queryset，可以通过添加<strong>many=True</strong>参数补充说明</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取数据</span>    book_list <span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    response_msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'成功'</span><span class="token punctuation">}</span>    <span class="token comment"># 转换数据[序列化过程]</span>    <span class="token comment"># 如果转换多个模型对象数据，则需要加上many=True</span>    book_ser <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book_list<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> book_ser<span class="token punctuation">.</span>data <span class="token punctuation">)</span> <span class="token comment"># 序列化器转换后的数据</span>    response_msg<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token operator">=</span>book_ser<span class="token punctuation">.</span>data    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>response_msg<span class="token punctuation">)</span>    <span class="token comment"># 响应数据给客户端</span>    <span class="token comment"># 返回的json数据，如果是列表，则需要声明safe=False</span>    <span class="token comment">#return JsonResponse(serializer.data,safe=False)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列化字段类型和字段选项"><a href="#序列化字段类型和字段选项" class="headerlink" title="序列化字段类型和字段选项"></a>序列化字段类型和字段选项</h4><p><img src="/.io//codedog\blog\GormanBlog\source\img\serializer1.png"></p><p><img src="/.io//codedog\blog\GormanBlog\source\img\serializer0.png"></p><h4 id="序列化高级用法示例"><a href="#序列化高级用法示例" class="headerlink" title="序列化高级用法示例"></a>序列化高级用法示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#source和serializers.SerializerMethodField()的用法</span><span class="token comment"># models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    price<span class="token operator">=</span>models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    pub_date<span class="token operator">=</span>models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    publish<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Publish"</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    authors<span class="token operator">=</span>models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span><span class="token string">"Author"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title<span class="token keyword">class</span> <span class="token class-name">Publish</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    email<span class="token operator">=</span>models<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    age<span class="token operator">=</span>models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ser.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> app01<span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token keyword">class</span> <span class="token class-name">BookSerializers</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span><span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    title<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    price<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    pub_date<span class="token operator">=</span>serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># publish=serializers.CharField(source="publish.name",read_only=True)</span>    publish<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">"publish.name"</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>    <span class="token comment">#authors=serializers.CharField(source="authors.all")</span>    authors<span class="token operator">=</span>serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_authors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> author <span class="token keyword">in</span> obj<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>author<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">)</span>        publish_id<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>publish_id<span class="token punctuation">)</span>        <span class="token keyword">del</span> validated_data<span class="token punctuation">[</span><span class="token string">'publish'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>publish_id<span class="token operator">=</span>publish_id<span class="token punctuation">,</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>title <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>price <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>pub_date <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pub_date'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>pub_date<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>publish<span class="token punctuation">)</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>publish_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>publish<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span>HttpResponse<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> app01<span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> app01<span class="token punctuation">.</span>ser <span class="token keyword">import</span> BookSerializers<span class="token keyword">class</span> <span class="token class-name">BookViewSet</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_list<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 序列化方式3:</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_list<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment">#many=True代表有多条数据，如果只有一条数据，many=False</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment"># 新增</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># print(bs.validated_data)</span>        bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment"># 如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</span><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_obj<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment"># 修改数据</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj <span class="token operator">=</span> models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>instance<span class="token operator">=</span>book_obj<span class="token punctuation">,</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>partial<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span>aa<span class="token operator">=</span><span class="token string">"lqz"</span><span class="token punctuation">)</span> <span class="token comment"># update</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token comment"># 删除数据</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> app01 <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'books/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    re_path<span class="token punctuation">(</span><span class="token string">'books/(?P&lt;pk&gt;\d+)/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookDetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># source的使用.</span><span class="token number">1</span> 可以改字段名字 xxx <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token number">2</span> 可以<span class="token punctuation">.</span>跨表publish <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">'publish.email'</span><span class="token punctuation">)</span><span class="token number">3</span> 可以执行方法 pub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">)</span> test是Book表模型中的方法<span class="token comment"># SerializerMethodField()的使用</span><span class="token number">1</span> 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西    authors<span class="token operator">=</span>serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_authors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> author <span class="token keyword">in</span> obj<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>author<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''在客户端请求时，使用序列化器可以完成对数据的反序列化。使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。验证成功，可以通过序列化器对象的validated_data属性获取数据。在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。    def put(self,request,pk):        book_obj = models.Book.objects.filter(pk=pk).first()        bs=BookSerializers(instance=book_obj,data=request.data,partial=True)        if bs.is_valid():            bs.save(aa="lqz") # update            return Response(bs.data)        else:            return Response(bs.errors)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Return a 400 response if the data was invalid.</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="局部钩子验证"><a href="#局部钩子验证" class="headerlink" title="局部钩子验证"></a>局部钩子验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果需要对字段进行额外的验证，则可以使用局部钩子和全局钩子；跟form组件类似</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validate_btitle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#validate_字段名 接收一个参数</span>        <span class="token keyword">if</span> <span class="token string">'django'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">"图书不是关于Django的"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局钩子验证"><a href="#全局钩子验证" class="headerlink" title="全局钩子验证"></a>全局钩子验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        bread <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        bcomment <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> bread <span class="token operator">&lt;</span> bcomment<span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'阅读量小于评论量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="validators验证"><a href="#validators验证" class="headerlink" title="validators验证"></a>validators验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">about_django</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'django'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">"图书不是关于Django的"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'ID'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>about_django<span class="token punctuation">]</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'评论量'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'图片'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模型类序列化器"><a href="#模型类序列化器" class="headerlink" title="模型类序列化器"></a>模型类序列化器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BookInfo  <span class="token comment"># 指明参照哪个模型类 </span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 指明为模型类的哪些字段生成</span>        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'btitle'</span><span class="token punctuation">,</span> <span class="token string">'bpub_date'</span><span class="token punctuation">)</span> <span class="token comment"># 也可以写明具体哪些字段</span>        exclude <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 排除哪个字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'bread'</span><span class="token punctuation">,</span> <span class="token string">'bcomment'</span><span class="token punctuation">)</span> <span class="token comment"># 通过read_only_fields指明只读字段，即仅用于序列化输出的字段</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'bread'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'bcomment'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span> <span class="token comment"># 使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列化组件源码分析思路"><a href="#序列化组件源码分析思路" class="headerlink" title="序列化组件源码分析思路"></a>序列化组件源码分析思路</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 局部钩子和全局的流程</span><span class="token comment">#is_valid----&gt;self.run_validation-(执行Serializer的run_validation)--&gt;self.to_internal_value(data)---（执行Serializer的run_validation：485行）</span><span class="token comment"># 序列化组件思路</span><span class="token number">1</span><span class="token punctuation">.</span>序列化组件，先调用__new__方法，如果many<span class="token operator">=</span><span class="token boolean">True</span>，生成ListSerializer对象，如果为<span class="token boolean">False</span>，生成Serializer对象    <span class="token triple-quoted-string string">'''这里通过一个many参数来控制生成不同的对像！'''</span><span class="token number">2</span><span class="token punctuation">.</span>序列化对象<span class="token punctuation">.</span>data方法<span class="token operator">-</span><span class="token operator">-</span>调用父类data方法<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>调用对象自己的to_representation（自定义的序列化类无此方法，去父类找）<span class="token number">3.</span>Serializer类里有to_representation方法，<span class="token keyword">for</span>循环执行attribute <span class="token operator">=</span> field<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>再去Field类里去找get_attribute方法，self<span class="token punctuation">.</span>source_attrs就是被切分的source，然后执行get_attribute方法，source_attrs<span class="token number">5</span><span class="token punctuation">.</span>当参数传过去，判断是方法就加括号执行，是属性就把值取出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
