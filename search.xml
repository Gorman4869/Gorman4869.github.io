<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DRF-视图组件</title>
      <link href="/2021/08/04/drf-shi-tu-zu-jian/drf-shi-tu-zu-jian/"/>
      <url>/2021/08/04/drf-shi-tu-zu-jian/drf-shi-tu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="视图组件"><a href="#视图组件" class="headerlink" title="视图组件"></a>视图组件</h1><h2 id="视图基类"><a href="#视图基类" class="headerlink" title="视图基类"></a>视图基类</h2><h3 id="1、APIView"><a href="#1、APIView" class="headerlink" title="1、APIView"></a>1、APIView</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">rest_framework<span class="token punctuation">.</span>views<span class="token punctuation">.</span>APIView<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        APIView 是rest-framework提供的所有视图的基类，继承自Django的View父类。</p><p>​        <strong>APIView 和 View的不同之处：</strong></p><p>​            a: 传入到视图方法中的是rest-framework的Request对象，而不是Django的HttpRequeset对象；</p><p>​            b: 视图方法可以返回rest-framework的Response对象，视图会为响应数据设置（render）符合前端要求的格式；<br>​            c: 任何APIException异常都会被捕获到，并且处理成合适的响应信息；<br>​            d: 在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制</p><p>​        <strong>支持定义属性</strong></p><ul><li><p>authentication_classes 列表或元组，身份认证类</p></li><li><p>permissoin_classes 列表或元组，权限检查类</p></li><li><p>throttle_classes 列表或元组，流量控制类</p><p><strong>在APIView中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment"># url(r'^books/$', views.BookListView.as_view()),</span><span class="token keyword">class</span> <span class="token class-name">BookListView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、GenericAPIView-通用视图类"><a href="#2、GenericAPIView-通用视图类" class="headerlink" title="2、GenericAPIView[通用视图类]"></a>2、GenericAPIView[通用视图类]</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">rest_framework<span class="token punctuation">.</span>generics<span class="token punctuation">.</span>GenericAPIView<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继承自APIView，主要增加了操作序列化器和数据库查询的方法，作用是为Mixin扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个Mixin扩展类。</p><p><strong>提供的关于序列化器使用的属性与方法</strong>:</p><p>​        属性：serializer_class 指明视图使用的序列化器</p><p>​        方法：</p><ol><li><p>get_serializer_class(self)</p><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。返回序列化器类，默认返回serializer_class</p><p>可以重写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_staff<span class="token punctuation">:</span>        <span class="token keyword">return</span> FullAccountSerializer    <span class="token keyword">return</span> BasicAccountSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="get-serializer-self-args-kwargs"><a href="#get-serializer-self-args-kwargs" class="headerlink" title="get_serializer(self, *args, **kwargs)"></a>get_serializer(self, *args, **kwargs)</h5><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># request 当前视图的请求对象</span><span class="token comment"># view 当前请求的类视图对象</span><span class="token comment"># format 当前请求期望返回的数据格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提供的关于数据库查询的属性与方法</strong></p><p>​        属性：queryset 指明使用的数据查询集</p><p>​        方法：</p><ol><li><p>get_queryset(self)</p><p>返回视图使用的查询集，主要用来提供给Mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回<code>queryset</code>属性</p><p>可以重写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user    <span class="token keyword">return</span> user<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>get_object(self)</p><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p>若详情访问的模型类对象不存在，会返回404。</p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get_object()方法根据pk参数查找queryset中的数据对象</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五个视图扩展类"><a href="#五个视图扩展类" class="headerlink" title="五个视图扩展类"></a>五个视图扩展类</h2><p>​        作用：提供了几种后端视图（对数据资源进行曾删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。这五个扩展类需要搭配GenericAPIView父类，因为五个扩展类的实现需要调用GenericAPIView提供的序列化器与数据库查询的方法。</p><h3 id="1、ListModelMixin"><a href="#1、ListModelMixin" class="headerlink" title="1、ListModelMixin"></a>1、ListModelMixin</h3><p>​        列表视图扩展类，提供list(request, *args, **kwargs)方法快速实现列表视图，返回200状态码。该Mixin的list方法会对数据进行过滤和分页。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    List a queryset.    """</span>    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 过滤</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 分页</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>queryset<span class="token punctuation">)</span>        <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>page<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>eg:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> ListModelMixin<span class="token keyword">class</span> <span class="token class-name">BookListView</span><span class="token punctuation">(</span>ListModelMixin<span class="token punctuation">,</span> GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''使用视图扩展类前def get(self,request):    # 获取数据    book_list =Book.objects.all()    response_msg={'code':1000,'msg':'成功'}    # 转换数据[序列化过程]    # 如果转换多个模型对象数据，则需要加上many=True    book_ser = BookSerializer(instance=book_list,many=True)    print( book_ser.data ) # 序列化器转换后的数据    response_msg['data']=book_ser.data    return Response(response_msg)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、CreateModelMixin"><a href="#2、CreateModelMixin" class="headerlink" title="2、CreateModelMixin"></a>2、CreateModelMixin</h3><p>​        创建视图扩展类，提供create(request, *args, **kwargs)方法快速实现创建资源视图，返回201状态码。该如果序列化器对前端发送的数据验证失败，返回400错误。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CreateModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取序列化器</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 验证</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 保存</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_success_headers<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_success_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'Location'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>api_settings<span class="token punctuation">.</span>URL_FIELD_NAME<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、RetrieveModelMixin"><a href="#3、RetrieveModelMixin" class="headerlink" title="3、RetrieveModelMixin"></a>3、RetrieveModelMixin</h3><p>​        详情视图扩展类，提供retrieve(request, *args, **kwargs)方法,可以快速实现返回一个存在的数据对象。</p><p>可以快速实现返回一个存在的数据对象。如果存在，返回200， 否则返回404。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RetrieveModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Retrieve a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取对象，会检查对象的权限</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>eg:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>retrieve<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-UpdateModelMixin"><a href="#4、-UpdateModelMixin" class="headerlink" title="4、 UpdateModelMixin"></a>4、 UpdateModelMixin</h3><p>​        更新视图扩展类，提供update(request, *args, kwargs)方法，可以快速实现更新一个存在的数据对象。同时也提供partial_update(request, *args, kwargs)方法，可以实现局部更新。成功返回200，序列化器校验数据失败时，返回400错误。</p><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpdateModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Update a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        partial <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'partial'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> partial<span class="token operator">=</span>partial<span class="token punctuation">)</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>perform_update<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token string">'_prefetched_objects_cache'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If 'prefetch_related' has been applied to a queryset, we need to</span>            <span class="token comment"># forcibly invalidate the prefetch cache on the instance.</span>            instance<span class="token punctuation">.</span>_prefetched_objects_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">partial_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        kwargs<span class="token punctuation">[</span><span class="token string">'partial'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、DestroyModelMixin"><a href="#5、DestroyModelMixin" class="headerlink" title="5、DestroyModelMixin"></a>5、DestroyModelMixin</h3><p>​        删除视图扩展类，提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。</p><p>成功返回204，不存在返回404。</p><p><strong>源码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DestroyModelMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Destroy a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>perform_destroy<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七个子类视图"><a href="#七个子类视图" class="headerlink" title="七个子类视图"></a>七个子类视图</h2><ol><li><strong>CreateAPIView</strong> ：提供 post 方法、继承自：GenericAPIView、CreateModelMixin</li><li><strong>ListAPIView</strong>  ：提供 get 方法、继承自：GenericAPIView、ListModelMixin</li><li><strong>RetrieveAPIView</strong>  ：提供 get 方法、继承自: GenericAPIView、RetrieveModelMixin</li><li><strong>DestoryAPIView</strong>  ：提供 delete 方法、继承自：GenericAPIView、DestoryModelMixin</li><li><strong>UpdateAPIView</strong> : 提供 put 和 patch 方法、继承自：GenericAPIView、UpdateModelMixin</li><li><strong>RetrieveUpdateAPIView</strong> ：提供 get、put、patch方法、继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</li><li><strong>RetrieveUpdateDestoryAPIView</strong>  ：提供 get、put、patch、delete方法、继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</li></ol><h2 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h2><p>​        使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中，ViewSet视图集类不再实现get()、post()等方法，而是实现动作 action 如 list() 、create() 等。视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上</p><ul><li>list() 提供一组数据</li><li>retrieve() 提供单个数据</li><li>create() 创建数据</li><li>update() 保存数据</li><li>destroy() 删除数据</li></ul><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>pk<span class="token punctuation">)</span>        <span class="token keyword">except</span> BookInfo<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_404_NOT_FOUND<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>books<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span><span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图集父类"><a href="#视图集父类" class="headerlink" title="视图集父类"></a>视图集父类</h2><h3 id="1、ViewSet"><a href="#1、ViewSet" class="headerlink" title="1、ViewSet"></a>1、ViewSet</h3><p>​            继承自APIView与ViewSetMixin，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典（如{‘get’:’list’}）的映射处理工作。在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h3 id="2、GenericViewSet"><a href="#2、GenericViewSet" class="headerlink" title="2、GenericViewSet"></a>2、GenericViewSet</h3><p>​            使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与GenericAPIView，所以还需要继承GenericAPIView。</p><p>​            GenericViewSet就帮助我们完成了这样的继承工作，继承自GenericAPIView与ViewSetMixin，在实现了调用as_view()时传入字典（如{‘get’:’list’}）的映射处理工作的同时，还提供了GenericAPIView提供的基础方法，可以直接搭配Mixin扩展类使用。</p><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> GenericViewSet<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、ModelViewSet"><a href="#3、ModelViewSet" class="headerlink" title="3、ModelViewSet"></a>3、ModelViewSet</h3><p>​        继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h3 id="4、ReadOnlyModelViewSet"><a href="#4、ReadOnlyModelViewSet" class="headerlink" title="4、ReadOnlyModelViewSet"></a>4、ReadOnlyModelViewSet</h3><p>​        继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin。</p><h3 id="视图集中自定义action动作"><a href="#视图集中自定义action动作" class="headerlink" title="视图集中自定义action动作"></a>视图集中自定义action动作</h3><p><strong>eg：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> GenericViewSet<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">class</span> <span class="token class-name">BookInfoViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoSerializer    <span class="token keyword">def</span> <span class="token function">latest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        返回最新的图书信息        """</span>        book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>latest<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        修改图书的阅读量数据        """</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        book<span class="token punctuation">.</span>bread <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>        book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/latest/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'latest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^books/(?P&lt;pk&gt;\d+)/read/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookInfoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h3><p>​        在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet<span class="token punctuation">,</span>ReadOnlyModelViewSet<span class="token keyword">from</span> booktest<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoModelSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">BookInfoModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token keyword">def</span> <span class="token function">get_top_5</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取评论值最多的5条数据"""</span>        <span class="token comment"># 操作数据库</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token comment"># 获取本次请求的视图方法名</span>                通过路由访问到当前方法中<span class="token punctuation">.</span>可以看到本次的action就是请求的方法名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-请求与响应</title>
      <link href="/2021/08/04/drf-qing-qiu-yu-xiang-ying/drf-qing-qiu-yu-xiang-ying/"/>
      <url>/2021/08/04/drf-qing-qiu-yu-xiang-ying/drf-qing-qiu-yu-xiang-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h1><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>​            1 rest-framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是rest-framework 提供的扩展了HttpRequest类的Request类的对象</p><p>​            2 rest-framework  提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典[QueryDict]对象保存到Request对象中。</p><p>​            3 <strong>Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据</strong></p><h2 id="request常用属性"><a href="#request常用属性" class="headerlink" title="request常用属性"></a>request常用属性</h2><p>​        <strong>.data</strong></p><p>​            request.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和 request.FILES属性，但提供如下特性：</p><p>​            a: 包含了解析之后的文件和非文件数据<br>​            b: 包含了对POST、PUT、PATCH请求方式解析后的数据<br>​            c: 利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据</p><p><strong>.query_params</strong><br>        request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</p><h2 id="request源码分析"><a href="#request源码分析" class="headerlink" title="request源码分析"></a>request源码分析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># as_view()</span><span class="token comment"># 核心走了父类as_view</span>view <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>APIView<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>    <span class="token comment"># 返回的是局部禁用csrf认证的view视图函数</span>    <span class="token keyword">return</span> csrf_exempt<span class="token punctuation">(</span>view<span class="token punctuation">)</span>    <span class="token comment"># dispatch(self, request, *args, **kwargs)</span><span class="token comment"># 二次封装request对象</span>request <span class="token operator">=</span> self<span class="token punctuation">.</span>initialize_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment"># 自定义request规则</span>    self<span class="token punctuation">.</span>initial<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment"># initialize_request(self, request, *args, **kwargs)</span><span class="token comment"># 原生request封装在request._request</span>    <span class="token comment"># initial(self, request, *args, **kwargs)</span><span class="token comment"># 认证</span>self<span class="token punctuation">.</span>perform_authentication<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment"># 权限</span>    self<span class="token punctuation">.</span>check_permissions<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment"># 频率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>​            1. rest-framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。</p><p>​            2. rest-framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。可以在rest_framework.settings查找所有的drf默认配置项</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token comment"># 默认响应渲染类</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">,</span>  <span class="token comment"># json渲染器</span>        <span class="token string">'rest_framework.renderers.BrowsableAPIRenderer'</span><span class="token punctuation">,</span>  <span class="token comment"># 浏览API渲染器</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="response构造方式"><a href="#response构造方式" class="headerlink" title="response构造方式"></a>response构造方式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​            data数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用renderer渲染器处理data。</p><p>​            data不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用Serializer序列化器序列化处理后（转为了Python字典类型）再传递给data参数。</p><p>​            参数说明：</p><ul><li><p><code>data</code>: 为响应准备的序列化处理后的数据；</p></li><li><p><code>status</code>: 状态码，默认200</p></li><li><p><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</p></li><li><p><code>headers</code>: 用于存放响应头信息的字典；</p></li><li><p><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</p><p>​                    </p></li></ul><h3 id="response常用属性"><a href="#response常用属性" class="headerlink" title="response常用属性"></a>response常用属性</h3><ul><li>.data: 传给response对象的序列化后，但尚未render处理的数据</li><li>.status_code: 状态码数据</li><li>.content: 经过render处理后的响应数据</li></ul><h2 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span>  HTMLFormRenderer<span class="token punctuation">,</span>BrowsableAPIRenderer<span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    renderer_classes <span class="token operator">=</span> <span class="token punctuation">[</span>HTMLFormRenderer<span class="token punctuation">,</span>BrowsableAPIRenderer <span class="token punctuation">]</span> <span class="token comment">#直接在类里面配置</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_obj<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj <span class="token operator">=</span> models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>instance<span class="token operator">=</span>book_obj<span class="token punctuation">)</span>        <span class="token keyword">if</span> bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># update</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py中配置</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p> rest-framework在rest_framework.status模块中提供了常用状态码常量。</p><p>信息告知-1xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_100_CONTINUEHTTP_101_SWITCHING_PROTOCOLS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功-2xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_200_OKHTTP_201_CREATEDHTTP_202_ACCEPTEDHTTP_203_NON_AUTHORITATIVE_INFORMATIONHTTP_204_NO_CONTENTHTTP_205_RESET_CONTENTHTTP_206_PARTIAL_CONTENTHTTP_207_MULTI_STATUS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重定向-3xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_200_OKHTTP_201_CREATEDHTTP_202_ACCEPTEDHTTP_203_NON_AUTHORITATIVE_INFORMATIONHTTP_204_NO_CONTENTHTTP_205_RESET_CONTENTHTTP_206_PARTIAL_CONTENTHTTP_207_MULTI_STATUS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端错误-4xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_400_BAD_REQUESTHTTP_401_UNAUTHORIZEDHTTP_402_PAYMENT_REQUIREDHTTP_403_FORBIDDENHTTP_404_NOT_FOUNDHTTP_405_METHOD_NOT_ALLOWEDHTTP_406_NOT_ACCEPTABLEHTTP_407_PROXY_AUTHENTICATION_REQUIREDHTTP_408_REQUEST_TIMEOUTHTTP_409_CONFLICTHTTP_410_GONEHTTP_411_LENGTH_REQUIREDHTTP_412_PRECONDITION_FAILEDHTTP_413_REQUEST_ENTITY_TOO_LARGEHTTP_414_REQUEST_URI_TOO_LONGHTTP_415_UNSUPPORTED_MEDIA_TYPEHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLEHTTP_417_EXPECTATION_FAILEDHTTP_422_UNPROCESSABLE_ENTITYHTTP_423_LOCKEDHTTP_424_FAILED_DEPENDENCYHTTP_428_PRECONDITION_REQUIREDHTTP_429_TOO_MANY_REQUESTSHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGEHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器错误-5xx</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HTTP_500_INTERNAL_SERVER_ERRORHTTP_501_NOT_IMPLEMENTEDHTTP_502_BAD_GATEWAYHTTP_503_SERVICE_UNAVAILABLEHTTP_504_GATEWAY_TIMEOUTHTTP_505_HTTP_VERSION_NOT_SUPPORTEDHTTP_507_INSUFFICIENT_STORAGEHTTP_511_NETWORK_AUTHENTICATION_REQUIRED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之存储引擎</title>
      <link href="/2021/08/04/shu-ju-ku-zhi-cun-chu-yin-qing/shu-ju-ku-zhi-cun-chu-yin-qing/"/>
      <url>/2021/08/04/shu-ju-ku-zhi-cun-chu-yin-qing/shu-ju-ku-zhi-cun-chu-yin-qing/</url>
      
        <content type="html"><![CDATA[<h3 id="存储引擎（Storage-engine）"><a href="#存储引擎（Storage-engine）" class="headerlink" title="存储引擎（Storage engine）"></a>存储引擎（Storage engine）</h3><p>​        存储引擎说白了就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方<br>法。因为在关系数据库中数据的存储是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和<br>操作此表的类型）</p><p>​        在Oracle 和SQL Server等数据库中只有一种存储引擎，所有数据存储管理机制都是一样的。而MySql<br>数据库提供了多种存储引擎。用户可以根据不同的需求为数据表选择不同的存储引擎，用户也可以根据<br>自己的需要编写自己的存储引擎</p><h3 id="常用的存储引擎"><a href="#常用的存储引擎" class="headerlink" title="常用的存储引擎"></a>常用的存储引擎</h3><p>​        a: Innodb引擎：Innodb引擎提供了对数据库ACID事务的支持。并且还提供了行级锁和外键的约束。它的设计的目标就是处理大数据容量的数据库系统。<br>​        b: MyIASM引擎(原本Mysql的默认引擎)：不提供事务的支持，也不支持行级锁和外键。<br>​        c: MEMORY引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不高,在重启mysql或者重启机器后，表内数据清空</p><h3 id="innodb引擎的4大特性"><a href="#innodb引擎的4大特性" class="headerlink" title="innodb引擎的4大特性"></a>innodb引擎的4大特性</h3><p>​        1. 插入缓冲；2. 二次写入； 3. 自适应哈希索引； 4. 预读</p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>​        如果没有特别的需求，使用默认的Innodb即可。</p><p>​        MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p><p>​        Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键。比如OA自动化办公系统。</p><h3 id="使用存储引擎"><a href="#使用存储引擎" class="headerlink" title="使用存储引擎"></a>使用存储引擎</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 建表时直接指定</span>mysql<span class="token operator">&gt;</span> create table innodb_t1<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">,</span>name char<span class="token punctuation">)</span>engine<span class="token operator">=</span>innodb<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> create table innodb_t2<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">)</span>engine<span class="token operator">=</span>innodb<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> show create table innodb_t1<span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> show create table innodb_t2<span class="token punctuation">;</span><span class="token comment"># 配置文件中指定</span> <span class="token operator">/</span>my<span class="token punctuation">.</span>ini<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>default<span class="token operator">-</span>storage<span class="token operator">-</span>engine<span class="token operator">=</span>INNODBinnodb_file_per_table<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库前戏</title>
      <link href="/2021/08/04/shu-ju-ku-qian-xi/shu-ju-ku-qian-xi/"/>
      <url>/2021/08/04/shu-ju-ku-qian-xi/shu-ju-ku-qian-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库前戏"><a href="#数据库前戏" class="headerlink" title="数据库前戏"></a>数据库前戏</h3><ol><li><p>为什么要使用数据库</p><ol><li>数据放在内存里，存取的速度快，但数据不能永久保存</li><li>数据放在文件内，数据可以永久保存，速度存取速度比内存慢，频繁IO操作；查询数据不方便</li><li>数据放在数据库中，数据永久保存，使用sql语句，查询方便效率高；管理数据方便。</li></ol></li><li><p>什么数据库</p><ol><li><p>数据库即存放数据的仓库，只不过这个仓库是在计算机存储设备上，而且数据是按一定的格式存放的</p></li><li><p>过去人们将数据存放在文件柜里，现在数据量庞大，已经不再适用</p></li><li><p>数据库是长期存放在计算机内、有组织、可共享的数据即可。</p></li><li><p>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种 用户共享</p></li></ol></li><li><p> 什么是数据库管理系统（DataBase Management System 简称DBMS）</p></li><li><p>如MySQL、Oracle、SQLite、Access、MS SQL Server</p></li><li><p>mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。sql server是微软公司的产品，主要应用于大中型企业，如联想、方正等。</p></li><li><p>数据库服务器、数据管理系统、数据库、表与记录的关系</p><p>​        数据库服务器：运行数据库管理软件；</p><p>​        数据库管理软件：管理-数据库、数据库：</p><p>​        即文件夹，用来组织文件/表；</p><p>​        表：即文件，用来存放多行内容/多条记录</p></li><li><p>数据库系统有以下优点：</p><p>​    　a：数据的安全性保护 b：数据的完整性检查 c：并发控制 d：数据库恢复</p></li></ol><h3 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL"></a>什么是MySQL</h3><p>​        MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>mysql</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#mysql就是一个基于socket编写的C/S架构的软件</span><span class="token comment">#客户端软件</span>　　mysql自带：如mysql命令，mysqldump命令等　　python模块：如pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据库管理软件分类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#分两大类：</span>　　关系型：如sqllite，db2，oracle，access，sql server，MySQL，注意：sql语句通用　　非关系型：mongodb，redis，memcache<span class="token comment">#可以简单的理解为：</span>    关系型数据库需要有表结构    非关系型数据库是key<span class="token operator">-</span>value存储的，没有表结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>​        SQL语句是结构化查询语言(Structured Query Language)简称SQL，是一种数据库查询语言。</p><p>​        作用：用于存取数据、查询、更新和管理关系数据库系统。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">SQL语言主要用于存取数据、查询数据、更新数据和管理关系数据库系统<span class="token punctuation">,</span>SQL语言由IBM开发。SQL语言分为<span class="token number">3</span>种类型：<span class="token comment">#1、DDL语句    数据库定义语言： 数据库、表、视图、索引、存储过程，例如CREATE DROP ALTER</span><span class="token comment">#2、DML语句    数据库操纵语言： 插入数据INSERT、删除数据DELETE、更新数据UPDATE、查询数据SELECT</span><span class="token comment">#3、DCL语句    数据库控制语言： 例如控制用户的访问权限GRANT、REVOKE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sql语句尝试</span><span class="token comment">#1. 操作文件夹</span>        增：create database db1 charset utf8<span class="token punctuation">;</span>        查：show databases<span class="token punctuation">;</span>        改：alter database db1 charset latin1<span class="token punctuation">;</span>        删除<span class="token punctuation">:</span> drop database db1<span class="token punctuation">;</span><span class="token comment">#2. 操作文件</span>    先切换到文件夹下：use db1        增：create table t1<span class="token punctuation">(</span><span class="token builtin">id</span> <span class="token builtin">int</span><span class="token punctuation">,</span>name char<span class="token punctuation">)</span><span class="token punctuation">;</span>        查：show tables        改：alter table t1 modify name char<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              alter table t1 change name name1 char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        删：drop table t1<span class="token punctuation">;</span>    <span class="token comment">#3. 操作文件中的内容/记录</span>        增：insert into t1 values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'egon1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'egon2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'egon3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        查：select <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>        改：update t1 <span class="token builtin">set</span> name<span class="token operator">=</span><span class="token string">'sb'</span> where <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        删：delete <span class="token keyword">from</span> t1 where <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        清空表：            delete <span class="token keyword">from</span> t1<span class="token punctuation">;</span> <span class="token comment">#如果有自增id，新增的数据，仍然是以删除前的最后一样作为起始。</span>            truncate table t1<span class="token punctuation">;</span>数据量大，删除速度比上一条快，且直接从零开始，            auto_increment 表示：自增            primary key 表示：约束（不能重复且不能为空）；加速查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF-序列化</title>
      <link href="/2021/07/31/xu-lie-hua-zu-jian/"/>
      <url>/2021/07/31/xu-lie-hua-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>8.3  学习内容—序列化组件</p><h4 id="序列化器Serializer介绍"><a href="#序列化器Serializer介绍" class="headerlink" title="序列化器Serializer介绍"></a>序列化器Serializer介绍</h4><ol><li><p>序列化，序列化器会把模型对象转成字典经过response变成jason格式。</p></li><li><p>反序列化：把客户端发过来的数据，经过request变成字典，序列化器可以把字典转成模型。</p></li><li><p>反序列化，完成数据校验功能。</p></li><li><p>跟forms组件类似。</p></li></ol><h4 id="Serializer的构造方法为"><a href="#Serializer的构造方法为" class="headerlink" title="Serializer的构造方法为"></a>Serializer的构造方法为</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">Serializer<span class="token punctuation">(</span>instance<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token operator">=</span>empty<span class="token punctuation">,</span> <span class="token operator">**</span>kwarg<span class="token punctuation">)</span>serializer <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>book<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 用于序列化时，将模型类对象传入instance参数</span><span class="token comment"># 用于反序列化时，将要被反序列化的数据传入data参数</span><span class="token comment"># 除了instance和data参数外，在构造Serializer对象时，还可通过context参数额外添加数据,通过context参数附加的数据，可以通过Serializer对象的context属性获取。</span><span class="token comment"># 使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</span><span class="token comment"># 序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</span><span class="token comment"># 序列化器的字段声明类似于我们前面使用过的表单系统。</span><span class="token comment"># drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><h4 id="简单使用序列化器"><a href="#简单使用序列化器" class="headerlink" title="简单使用序列化器"></a>简单使用序列化器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''序列化器的使用分两个阶段：1. 在客户端请求时，使用序列化器可以完成对数据的反序列化。2. 在服务器响应时，使用序列化器可以完成对数据的序列化。'''</span><span class="token comment">#1 写一个序列化的类，继承Serializer</span><span class="token comment">#2 在类中写要序列化的字段，想序列化哪个字段就在类中写哪个字段</span><span class="token comment">#3 在视图类中使用，导入--》实例化得到序列化类的对像，把要序列化的对像传入</span><span class="token comment">#4 序列化类的对像.data 是一个字典</span><span class="token comment"># models.py 创建表</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''~~~'''</span><span class="token comment"># ser.py</span><span class="token comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于 Serializer</span><span class="token comment"># 其中，ModelSerializer是Serializer的子类，ModelSerializer在Serializer的基础上进行了代码简化</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">BookSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 需要进行数据转换的字段</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''等需要序列化的字段'''</span><span class="token comment"># url.py</span><span class="token keyword">from</span> dajango<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> app01 <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>re_path<span class="token punctuation">(</span><span class="token string">'books/(?P&lt;pk&gt;\d+)'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>Bookview<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> app01<span class="token punctuation">.</span>ser <span class="token keyword">import</span> BookSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">BookView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        book_ser <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>book<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>book_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要序列化的数据有多条Queryset，可以通过添加<strong>many=True</strong>参数补充说明</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取数据</span>    book_list <span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    response_msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'成功'</span><span class="token punctuation">}</span>    <span class="token comment"># 转换数据[序列化过程]</span>    <span class="token comment"># 如果转换多个模型对象数据，则需要加上many=True</span>    book_ser <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book_list<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> book_ser<span class="token punctuation">.</span>data <span class="token punctuation">)</span> <span class="token comment"># 序列化器转换后的数据</span>    response_msg<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token operator">=</span>book_ser<span class="token punctuation">.</span>data    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>response_msg<span class="token punctuation">)</span>    <span class="token comment"># 响应数据给客户端</span>    <span class="token comment"># 返回的json数据，如果是列表，则需要声明safe=False</span>    <span class="token comment">#return JsonResponse(serializer.data,safe=False)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列化字段类型和字段选项"><a href="#序列化字段类型和字段选项" class="headerlink" title="序列化字段类型和字段选项"></a>序列化字段类型和字段选项</h4><p><img src="D:\codedog\blog\GormanBlog\source\img\serializer1.png"></p><p><img src="D:\codedog\blog\GormanBlog\source\img\serializer0.png"></p><h4 id="序列化高级用法示例"><a href="#序列化高级用法示例" class="headerlink" title="序列化高级用法示例"></a>序列化高级用法示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#source和serializers.SerializerMethodField()的用法</span><span class="token comment"># models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    price<span class="token operator">=</span>models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    pub_date<span class="token operator">=</span>models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    publish<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Publish"</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    authors<span class="token operator">=</span>models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span><span class="token string">"Author"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title<span class="token keyword">class</span> <span class="token class-name">Publish</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    email<span class="token operator">=</span>models<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    age<span class="token operator">=</span>models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ser.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> app01<span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token keyword">class</span> <span class="token class-name">BookSerializers</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span><span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    title<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    price<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    pub_date<span class="token operator">=</span>serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># publish=serializers.CharField(source="publish.name",read_only=True)</span>    publish<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">"publish.name"</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>    <span class="token comment">#authors=serializers.CharField(source="authors.all")</span>    authors<span class="token operator">=</span>serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_authors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> author <span class="token keyword">in</span> obj<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>author<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">)</span>        publish_id<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>publish_id<span class="token punctuation">)</span>        <span class="token keyword">del</span> validated_data<span class="token punctuation">[</span><span class="token string">'publish'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>publish_id<span class="token operator">=</span>publish_id<span class="token punctuation">,</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>title <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>price <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>pub_date <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pub_date'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>pub_date<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>publish<span class="token punctuation">)</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>publish_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>publish<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span>HttpResponse<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpRequest<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> app01<span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> app01<span class="token punctuation">.</span>ser <span class="token keyword">import</span> BookSerializers<span class="token keyword">class</span> <span class="token class-name">BookViewSet</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_list<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 序列化方式3:</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_list<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment">#many=True代表有多条数据，如果只有一条数据，many=False</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment"># 新增</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># print(bs.validated_data)</span>        bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment"># 如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</span><span class="token keyword">class</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>book_obj<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment"># 修改数据</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book_obj <span class="token operator">=</span> models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs<span class="token operator">=</span>BookSerializers<span class="token punctuation">(</span>instance<span class="token operator">=</span>book_obj<span class="token punctuation">,</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>partial<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bs<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bs<span class="token punctuation">.</span>save<span class="token punctuation">(</span>aa<span class="token operator">=</span><span class="token string">"lqz"</span><span class="token punctuation">)</span> <span class="token comment"># update</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>bs<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token comment"># 删除数据</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        models<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> app01 <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'books/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    re_path<span class="token punctuation">(</span><span class="token string">'books/(?P&lt;pk&gt;\d+)/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookDetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># source的使用.</span><span class="token number">1</span> 可以改字段名字 xxx <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token number">2</span> 可以<span class="token punctuation">.</span>跨表publish <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">'publish.email'</span><span class="token punctuation">)</span><span class="token number">3</span> 可以执行方法 pub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">)</span> test是Book表模型中的方法<span class="token comment"># SerializerMethodField()的使用</span><span class="token number">1</span> 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西    authors<span class="token operator">=</span>serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_authors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> author <span class="token keyword">in</span> obj<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>author<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''在客户端请求时，使用序列化器可以完成对数据的反序列化。使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。验证成功，可以通过序列化器对象的validated_data属性获取数据。在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。    def put(self,request,pk):        book_obj = models.Book.objects.filter(pk=pk).first()        bs=BookSerializers(instance=book_obj,data=request.data,partial=True)        if bs.is_valid():            bs.save(aa="lqz") # update            return Response(bs.data)        else:            return Response(bs.errors)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Return a 400 response if the data was invalid.</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="局部钩子验证"><a href="#局部钩子验证" class="headerlink" title="局部钩子验证"></a>局部钩子验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果需要对字段进行额外的验证，则可以使用局部钩子和全局钩子；跟form组件类似</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validate_btitle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#validate_字段名 接收一个参数</span>        <span class="token keyword">if</span> <span class="token string">'django'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">"图书不是关于Django的"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局钩子验证"><a href="#全局钩子验证" class="headerlink" title="全局钩子验证"></a>全局钩子验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        bread <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        bcomment <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> bread <span class="token operator">&lt;</span> bcomment<span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'阅读量小于评论量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="validators验证"><a href="#validators验证" class="headerlink" title="validators验证"></a>validators验证</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">about_django</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'django'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">"图书不是关于Django的"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'ID'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>about_django<span class="token punctuation">]</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'评论量'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'图片'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模型类序列化器"><a href="#模型类序列化器" class="headerlink" title="模型类序列化器"></a>模型类序列化器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BookInfo  <span class="token comment"># 指明参照哪个模型类 </span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 指明为模型类的哪些字段生成</span>        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'btitle'</span><span class="token punctuation">,</span> <span class="token string">'bpub_date'</span><span class="token punctuation">)</span> <span class="token comment"># 也可以写明具体哪些字段</span>        exclude <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 排除哪个字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'bread'</span><span class="token punctuation">,</span> <span class="token string">'bcomment'</span><span class="token punctuation">)</span> <span class="token comment"># 通过read_only_fields指明只读字段，即仅用于序列化输出的字段</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'bread'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'bcomment'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span> <span class="token comment"># 使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列化组件源码分析思路"><a href="#序列化组件源码分析思路" class="headerlink" title="序列化组件源码分析思路"></a>序列化组件源码分析思路</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 局部钩子和全局的流程</span><span class="token comment">#is_valid----&gt;self.run_validation-(执行Serializer的run_validation)--&gt;self.to_internal_value(data)---（执行Serializer的run_validation：485行）</span><span class="token comment"># 序列化组件思路</span><span class="token number">1</span><span class="token punctuation">.</span>序列化组件，先调用__new__方法，如果many<span class="token operator">=</span><span class="token boolean">True</span>，生成ListSerializer对象，如果为<span class="token boolean">False</span>，生成Serializer对象    <span class="token triple-quoted-string string">'''这里通过一个many参数来控制生成不同的对像！'''</span><span class="token number">2</span><span class="token punctuation">.</span>序列化对象<span class="token punctuation">.</span>data方法<span class="token operator">-</span><span class="token operator">-</span>调用父类data方法<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>调用对象自己的to_representation（自定义的序列化类无此方法，去父类找）<span class="token number">3.</span>Serializer类里有to_representation方法，<span class="token keyword">for</span>循环执行attribute <span class="token operator">=</span> field<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>再去Field类里去找get_attribute方法，self<span class="token punctuation">.</span>source_attrs就是被切分的source，然后执行get_attribute方法，source_attrs<span class="token number">5</span><span class="token punctuation">.</span>当参数传过去，判断是方法就加括号执行，是属性就把值取出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/30/hello-world/"/>
      <url>/2021/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
